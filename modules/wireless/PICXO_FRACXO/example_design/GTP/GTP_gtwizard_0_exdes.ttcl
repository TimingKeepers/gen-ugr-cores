<: setFileName "GTP_picxo_example_top" :>
<: setFileExtension ".vhd" :>
<: set ComponentName [getComponentNameString] :>
<: setOutputDirectory "./example_design/GTP" :>
<: set gt_type [ get_parameter_property GT_TYPE] :>
------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor: Xilinx
-- \   \   \/     Version : 2.6
--  \   \         Application : XAPP589 7 Series FPGA PICXO example design
--  /   /         Filename : GTP_picxo_example_top.vhd
-- /___/   /\     Timestamp : v25_0 @ Fri Apr  8 11:26:58 +0100 2016 Rev: 815:817
-- \   \  /  \ 
--  \___\/\___\
--
--
-- Module GTP_picxo_example_top
-- Generated by Xilinx 7 Series FPGAs Transceivers Wizard
-- 
-- 
-- (c) Copyright 2010-2012 Xilinx, Inc. All rights reserved.
-- 
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
-- 
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
-- 
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
-- 
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES. 


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library UNISIM;
use UNISIM.VCOMPONENTS.ALL;

--***********************************Entity Declaration************************

entity GTP_picxo_example_top is
generic
(
    EXAMPLE_CONFIG_INDEPENDENT_LANES       : integer   := 1;
    EXAMPLE_LANE_WITH_START_CHAR           : integer   := 0;      -- specifies lane with unique start frame ch
    EXAMPLE_WORDS_IN_BRAM                  : integer   := 512;    -- specifies amount of data in BRAM
    EXAMPLE_SIM_GTRESET_SPEEDUP            : string    := "FALSE"; -- simulation setting for GT SecureIP model
    EXAMPLE_SIMULATION                     : integer   := 0;      -- Set to 1 for simulation
    STABLE_CLOCK_PERIOD                    : integer   := 16; 
    EXAMPLE_USE_SCOPE                      : integer   := 1        -- Set to 1 to use Chipscope to drive resets
);
port
(
    Q0_CLK1_GTREFCLK_PAD_N_IN              : in   std_logic;
    Q0_CLK1_GTREFCLK_PAD_P_IN              : in   std_logic;
    SYS_CLK_N_IN                           : in   std_logic;
    SYS_CLK_P_IN                           : in   std_logic;
    PLL0_RESET_IN                          : in   std_logic; 
    RXN_IN                                 : in   std_logic;
    RXP_IN                                 : in   std_logic;
    TXN_OUT                                : out  std_logic;
    TXP_OUT                                : out  std_logic;
    gt0_txusrclk_o                         : out std_logic ;
----SFP+    
    SFP_LOS_IN                             : in   std_logic_vector(0 downto 0)  ;
    SFP_TX_DISABLE_OUT                     : out  std_logic_vector(0 downto 0)  ;
----PI_VCXO Coefficients
    G1_i                                   : in  STD_LOGIC_VECTOR (4 downto 0)  ;
    G2_i                                   : in  STD_LOGIC_VECTOR (4 downto 0)  ;
    R_i                                    : in  STD_LOGIC_VECTOR (15 downto 0) ;
    V_i                                    : in  STD_LOGIC_VECTOR (15 downto 0) ;
    ce_dsp_rate_i                          : in  std_logic_vector (15 downto 0) ;
    acc_step_i                             : in  std_logic_vector (3 downto 0)  ;
----Coefficients reserved                                                       
    c_i                                    : in  STD_LOGIC_VECTOR (6 downto 0)  ; 
    p_i                                    : in  STD_LOGIC_VECTOR (9 downto 0)  ; 
    n_i                                    : in  STD_LOGIC_VECTOR (9 downto 0)  ;
    don_i                                  : in  STD_LOGIC_VECTOR (0 downto 0)  ;
----Offset, hold                          
    Offset_ppm_i                           : in  std_logic_vector (21 downto 0) ;
    Offset_en_i                            : in  std_logic                      ;
    hold_i                                 : in  std_logic                      ;
    rsigce_i                               : in  STD_LOGIC                      ;
    vsigce_i                               : in  STD_LOGIC                     
);


end GTP_picxo_example_top;
    
architecture RTL of GTP_picxo_example_top is
    attribute CORE_GENERATION_INFO : string;
    attribute CORE_GENERATION_INFO of RTL : architecture is "gtwizard_0,gtwizard_v2_6,{protocol_file=Start_from_scratch}";

--**************************Component Declarations*****************************

component gtwizard_0_init
generic
(
    -- Simulation attributes
    EXAMPLE_SIM_GTRESET_SPEEDUP    : string    := "FALSE";    -- Set to 1 to speed up sim reset
    EXAMPLE_SIMULATION             : integer   := 0;          -- Set to 1 for simulation
    STABLE_CLOCK_PERIOD            : integer   := 16; 
    EXAMPLE_USE_CHIPSCOPE          : integer   := 1           -- Set to 1 to use Chipscope to drive resets
);
port
(
    SYSCLK_IN                               : in   std_logic;
    SOFT_RESET_IN                           : in   std_logic;
    DONT_RESET_ON_DATA_ERROR_IN             : in   std_logic;
    GT0_TX_FSM_RESET_DONE_OUT               : out  std_logic;
    GT0_RX_FSM_RESET_DONE_OUT               : out  std_logic;
    GT0_DATA_VALID_IN                       : in   std_logic;

    --_________________________________________________________________________
    --_________________________________________________________________________
        --GT0  (X0Y0)
    --____________________________CHANNEL PORTS________________________________
    ---------------------------- Channel - DRP Ports  --------------------------
    gt0_drpaddr_in                          : in   std_logic_vector(8 downto 0);
    gt0_drpclk_in                           : in   std_logic;
    gt0_drpdi_in                            : in   std_logic_vector(15 downto 0);
    gt0_drpdo_out                           : out  std_logic_vector(15 downto 0);
    gt0_drpen_in                            : in   std_logic;
    gt0_drprdy_out                          : out  std_logic;
    gt0_drpwe_in                            : in   std_logic;
    ----------------------------- PCI Express Ports ----------------------------
    gt0_rxrate_in                           : in   std_logic_vector(2 downto 0);
    --------------------- RX Initialization and Reset Ports --------------------
    gt0_rxuserrdy_in                        : in   std_logic;
    -------------------------- RX Margin Analysis Ports ------------------------
    gt0_eyescandataerror_out                : out  std_logic;
    ------------------------- Receive Ports - CDR Ports ------------------------
    gt0_rxcdrlock_out                       : out  std_logic;
    ------------------ Receive Ports - FPGA RX Interface Ports -----------------
    gt0_rxdata_out                          : out  std_logic_vector(19 downto 0);
    gt0_rxusrclk_in                         : in   std_logic;
    gt0_rxusrclk2_in                        : in   std_logic;
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    gt0_gtprxn_in                           : in   std_logic;
    gt0_gtprxp_in                           : in   std_logic;
    -------------------- Receive Ports - RX Equailizer Ports -------------------
    gt0_rxlpmhfhold_in                      : in   std_logic;
    gt0_rxlpmlfhold_in                      : in   std_logic;
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    gt0_rxoutclk_out                        : out  std_logic;
    gt0_rxratedone_out                      : out  std_logic;
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    gt0_gtrxreset_in                        : in   std_logic;
    gt0_rxpmareset_in                       : in   std_logic;
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    gt0_rxresetdone_out                     : out  std_logic;
    ------------------------ TX Configurable Driver Ports ----------------------
    gt0_txpostcursor_in                     : in   std_logic_vector(4 downto 0);
    gt0_txprecursor_in                      : in   std_logic_vector(4 downto 0);
    --------------------- TX Initialization and Reset Ports --------------------
    gt0_gttxreset_in                        : in   std_logic;
    gt0_txuserrdy_in                        : in   std_logic;
    ------------------ Transmit Ports - FPGA TX Interface Ports ----------------
    gt0_txdata_in                           : in   std_logic_vector(19 downto 0);
    gt0_txusrclk_in                         : in   std_logic;
    gt0_txusrclk2_in                        : in   std_logic;
    --------------------- Transmit Ports - PCI Express Ports -------------------
    gt0_txrate_in                           : in   std_logic_vector(2 downto 0);
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    gt0_gtptxn_out                          : out  std_logic;
    gt0_gtptxp_out                          : out  std_logic;
    gt0_txdiffctrl_in                       : in   std_logic_vector(3 downto 0);
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    gt0_txoutclk_out                        : out  std_logic;
    gt0_txoutclkfabric_out                  : out  std_logic;
    gt0_txoutclkpcs_out                     : out  std_logic;
    gt0_txratedone_out                      : out  std_logic;
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    gt0_txresetdone_out                     : out  std_logic;
    ---TXPI---
    gt0_txppmstepsize_in                    : in   std_logic_vector(4 downto 0);


    --____________________________COMMON PORTS________________________________
    ------------- Common Block  - Dynamic Reconfiguration Port (DRP) -----------
    gt0_drpaddr_common_in                   : in   std_logic_vector(7 downto 0);
    gt0_drpclk_common_in                    : in   std_logic;
    gt0_drpdi_common_in                     : in   std_logic_vector(15 downto 0);
    gt0_drpdo_common_out                    : out  std_logic_vector(15 downto 0);
    gt0_drpen_common_in                     : in   std_logic;
    gt0_drprdy_common_out                   : out  std_logic;
    gt0_drpwe_common_in                     : in   std_logic;
    ----------------- Common Block - GTPE2_COMMON Clocking Ports ---------------
    gt0_gtrefclk0_in                        : in   std_logic;
    -------------------------- Common Block - PLL Ports ------------------------
    gt0_pll0lock_out                        : out  std_logic;
    gt0_pll0lockdetclk_in                   : in   std_logic;
    gt0_pll0reset_in                        : in   std_logic
);
end component;

component gtwizard_0_GT_USRCLK_SOURCE 
port
(
        Q0_CLK1_GTREFCLK_PAD_N_IN    : in   std_logic;
        Q0_CLK1_GTREFCLK_PAD_P_IN    : in   std_logic;
        Q0_CLK1_GTREFCLK_OUT         : out  std_logic;
        GT0_TXUSRCLK_OUT             : out std_logic;
        GT0_TXUSRCLK2_OUT            : out std_logic;
        GT0_TXOUTCLK_IN              : in  std_logic;
        GT0_RXUSRCLK_OUT             : out std_logic;
        GT0_RXUSRCLK2_OUT            : out std_logic;
        DRPCLK_IN                    : in  std_logic;
        DRPCLK_OUT                   : out std_logic
);
end component;

COMPONENT <=: $ComponentName :>
 Port (      
          --Reset signal
          reset_i           : in  STD_LOGIC                                                       ;
          --Reference clock for locking the VCXO, can be any clock (local, BUFG, clock enable...)
          ref_clk_i         : in  STD_LOGIC                            ;
          --DRP port to connect to GTX
          drpen_o           : out STD_LOGIC                            ;
          drpwen_o          : out STD_LOGIC                            ;
          drprdy_i          : in  STD_LOGIC                            ;
          drpdo_i           : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          drpdata_o         : out STD_LOGIC_VECTOR (15 downto 0)       ;
          drpaddr_o         : out STD_LOGIC_VECTOR (8 downto 0)        ;
          drpbusy_o         : out STD_LOGIC                            ;
          --Clocks
          txoutclk_i        : in  std_logic                            ; 
          --phase detector clock enable, for future use
          rsigce_i          : in  STD_LOGIC                            ;
          vsigce_i          : in  STD_LOGIC                            ;
          vsigce_o          : out STD_LOGIC                            ;
          --Coefficients and divider values
          G1                : in  STD_LOGIC_VECTOR (4 downto 0)        ;
          G2                : in  STD_LOGIC_VECTOR (4 downto 0)        ;
          R                 : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          V                 : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          ce_dsp_rate       : in  std_logic_vector (15 downto 0)       ;
          acc_step          : in  std_logic_vector (3 downto 0)        ;
          --Offset, hold
          Offset_ppm        : in  std_logic_vector (21 downto 0)       ;
          Offset_en         : in  std_logic                            ;
          hold              : in  std_logic                            ;
          DON_I             : in  std_logic_vector (0  downto 0)       ;
          --Coefficients reserved
          C_i               : in  STD_LOGIC_VECTOR (6 downto 0);
          P_i               : in  STD_LOGIC_VECTOR (9 downto 0);
          N_i               : in  STD_LOGIC_VECTOR (9 downto 0)        ;
           --DRP user port
          drp_user_req_i    : in  STD_LOGIC                            ;
          drp_user_done_i   : in  STD_LOGIC                            ; 
          drpen_user_i      : in  STD_LOGIC                            ;
          drpwen_user_i     : in  STD_LOGIC                            ;
          drpaddr_user_i    : in  STD_LOGIC_VECTOR (8 downto 0)        ;
          drpdata_user_i    : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          drpdata_user_o    : out STD_LOGIC_VECTOR (15 downto 0)       ;
          drprdy_user_o     : out STD_LOGIC                            ;
          --TXPI Port data
          acc_data          : out std_logic_vector (4 downto 0)        ;
          --Debug port
          error_o           : out std_logic_vector (20 downto 0)       ;
          volt_o            : out std_logic_vector (21 downto 0)       ;
          drpdata_short_o   : out std_logic_vector (7 downto 0)        ;
          ce_pi_o           : out std_logic                            ;
          ce_pi2_o          : out std_logic                            ;
          ce_dsp_o          : out std_logic                            ;                
          ovf_pd            : out std_logic                            ;                                          
          ovf_ab            : out std_logic                            ;
          ovf_volt          : out std_logic                            ;
          ovf_int           : out std_logic                                           
          );
END COMPONENT;

<: if { $gt_type == "NO_GT"} { :>
COMPONENT <=: $ComponentName :>_with_gt
 Port (      
          --Reset signal
          reset_i           : in  STD_LOGIC                                                       ;
          --Reference clock for locking the VCXO, can be any clock (local, BUFG, clock enable...)
          ref_clk_i         : in  STD_LOGIC                            ;
          --DRP port to connect to GTX
          drpen_o           : out STD_LOGIC                            ;
          drpwen_o          : out STD_LOGIC                            ;
          drprdy_i          : in  STD_LOGIC                            ;
          drpdo_i           : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          drpdata_o         : out STD_LOGIC_VECTOR (15 downto 0)       ;
          drpaddr_o         : out STD_LOGIC_VECTOR (8 downto 0)        ;
          drpbusy_o         : out STD_LOGIC                            ;
          --Clocks
          txoutclk_i        : in  std_logic                            ; 
          --phase detector clock enable, for future use
          rsigce_i          : in  STD_LOGIC                            ;
          vsigce_i          : in  STD_LOGIC                            ;
          vsigce_o          : out STD_LOGIC                            ;
          --Coefficients and divider values
          G1                : in  STD_LOGIC_VECTOR (4 downto 0)        ;
          G2                : in  STD_LOGIC_VECTOR (4 downto 0)        ;
          R                 : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          V                 : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          ce_dsp_rate       : in  std_logic_vector (15 downto 0)       ;
          acc_step          : in  std_logic_vector (3 downto 0)        ;
          --Offset, hold
          Offset_ppm        : in  std_logic_vector (21 downto 0)       ;
          Offset_en         : in  std_logic                            ;
          hold              : in  std_logic                            ;
          DON_I             : in  std_logic_vector (0  downto 0)       ;
          --Coefficients reserved
          C_i               : in  STD_LOGIC_VECTOR (6 downto 0);
          P_i               : in  STD_LOGIC_VECTOR (9 downto 0);
          N_i               : in  STD_LOGIC_VECTOR (9 downto 0)        ;
           --DRP user port
          drp_user_req_i    : in  STD_LOGIC                            ;
          drp_user_done_i   : in  STD_LOGIC                            ; 
          drpen_user_i      : in  STD_LOGIC                            ;
          drpwen_user_i     : in  STD_LOGIC                            ;
          drpaddr_user_i    : in  STD_LOGIC_VECTOR (8 downto 0)        ;
          drpdata_user_i    : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          drpdata_user_o    : out STD_LOGIC_VECTOR (15 downto 0)       ;
          drprdy_user_o     : out STD_LOGIC                            ;
          --TXPI Port data
          acc_data          : out std_logic_vector (4 downto 0)        ;
          --Debug port
          error_o           : out std_logic_vector (20 downto 0)       ;
          volt_o            : out std_logic_vector (21 downto 0)       ;
          drpdata_short_o   : out std_logic_vector (7 downto 0)        ;
          ce_pi_o           : out std_logic                            ;
          ce_pi2_o          : out std_logic                            ;
          ce_dsp_o          : out std_logic                            ;                
          ovf_pd            : out std_logic                            ;                                          
          ovf_ab            : out std_logic                            ;
          ovf_volt          : out std_logic                            ;
          ovf_int           : out std_logic                                           
          );
END COMPONENT;

<: } :>
component data_vio
port(
     CLK        : IN  STD_LOGIC;
     PROBE_IN0  : IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
     PROBE_IN1  : IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
     PROBE_OUT0 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
     PROBE_OUT1 : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
 );
end component;


COMPONENT picxo_ila
  PORT (
    clk    : IN STD_LOGIC;
    probe0 : IN STD_LOGIC_VECTOR(20 DOWNTO 0);
    probe1 : IN STD_LOGIC_VECTOR(21 DOWNTO 0);
    probe2 : IN STD_LOGIC_VECTOR(7  DOWNTO 0);
    probe3 : IN STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe4 : IN STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe5 : IN STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe6 : IN STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe7 : IN STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe8 : IN STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe9 : IN STD_LOGIC_VECTOR(0  DOWNTO 0)
  );
END COMPONENT;

COMPONENT picxo_vio
  PORT (
    clk : IN STD_LOGIC;
    probe_out0  : OUT STD_LOGIC_VECTOR(4  DOWNTO 0);
    probe_out1  : OUT STD_LOGIC_VECTOR(4  DOWNTO 0);
    probe_out2  : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
    probe_out3  : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
    probe_out4  : OUT STD_LOGIC_VECTOR(3  DOWNTO 0);
    probe_out5  : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
    probe_out6  : OUT STD_LOGIC_VECTOR(21 DOWNTO 0);
    probe_out7  : OUT STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe_out8  : OUT STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe_out9  : OUT STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe_out10 : OUT STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe_out11 : OUT STD_LOGIC_VECTOR(0  DOWNTO 0)
  );
END COMPONENT;

--***********************************Parameter Declarations********************

    constant DLY : time := 1 ns;

--************************** Register Declarations ****************************

    signal   gt0_txfsmresetdone_i            : std_logic;
    signal   gt0_rxfsmresetdone_i            : std_logic;
    signal   gt0_txfsmresetdone_r            : std_logic;
    signal   gt0_txfsmresetdone_r2           : std_logic;
    signal   gt0_rxresetdone_r               : std_logic;
    signal   gt0_rxresetdone_r2              : std_logic;
    signal   gt0_rxresetdone_r3              : std_logic;

--**************************** Wire Declarations ******************************
    -------------------------- GT Wrapper Wires ------------------------------
    --________________________________________________________________________
    --________________________________________________________________________
    --GT0  (X0Y0)

    ---------------------------- Channel - DRP Ports  --------------------------
    signal  gt0_drpaddr_i                   : std_logic_vector(8 downto 0);
    signal  gt0_drpdi_i                     : std_logic_vector(15 downto 0);
    signal  gt0_drpdo_i                     : std_logic_vector(15 downto 0);
    signal  gt0_drpen_i                     : std_logic;
    signal  gt0_drprdy_i                    : std_logic;
    signal  gt0_drpwe_i                     : std_logic;
    ----------------------------- PCI Express Ports ----------------------------
    signal  gt0_rxrate_i                    : std_logic_vector(2 downto 0);
    --------------------- RX Initialization and Reset Ports --------------------
    signal  gt0_rxuserrdy_i                 : std_logic;
    -------------------------- RX Margin Analysis Ports ------------------------
    signal  gt0_eyescandataerror_i          : std_logic;
    ------------------------- Receive Ports - CDR Ports ------------------------
    signal  gt0_rxcdrlock_i                 : std_logic;
    ------------------ Receive Ports - FPGA RX Interface Ports -----------------
    signal  gt0_rxdata_i                    : std_logic_vector(19 downto 0);
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    signal  gt0_gtprxn_i                    : std_logic;
    signal  gt0_gtprxp_i                    : std_logic;
    -------------------- Receive Ports - RX Equailizer Ports -------------------
    signal  gt0_rxlpmhfhold_i               : std_logic;
    signal  gt0_rxlpmlfhold_i               : std_logic;
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    signal  gt0_rxratedone_i                : std_logic;
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    signal  gt0_rxoutclk_i                  : std_logic;
    signal  gt0_rxoutclk_bufg               : std_logic;
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    signal  gt0_gtrxreset_i                 : std_logic;
    signal  gt0_rxpcsreset_i                : std_logic;
    signal  gt0_rxpmareset_i                : std_logic;
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    signal  gt0_rxresetdone_i               : std_logic;
    ------------------------ TX Configurable Driver Ports ----------------------
    signal  gt0_txpostcursor_i              : std_logic_vector(4 downto 0);
    signal  gt0_txprecursor_i               : std_logic_vector(4 downto 0);
    --------------------- TX Initialization and Reset Ports --------------------
    signal  gt0_gttxreset_i                 : std_logic;
    signal  gt0_txuserrdy_i                 : std_logic;
    ------------------ Transmit Ports - FPGA TX Interface Ports ----------------
    signal  gt0_txdata_i                    : std_logic_vector(19 downto 0);
    --------------------- Transmit Ports - PCI Express Ports -------------------
    signal  gt0_txrate_i                    : std_logic_vector(2 downto 0);
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    signal  gt0_gtptxn_i                    : std_logic;
    signal  gt0_gtptxp_i                    : std_logic;
    signal  gt0_txdiffctrl_i                : std_logic_vector(3 downto 0);
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    signal  gt0_txoutclk_i                  : std_logic;
    signal  gt0_txoutclkfabric_i            : std_logic;
    signal  gt0_txoutclkpcs_i               : std_logic;
    signal  gt0_txratedone_i                : std_logic;
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    signal  gt0_txpcsreset_i                : std_logic;
    signal  gt0_txpmareset_i                : std_logic;
    signal  gt0_txresetdone_i               : std_logic;

    --____________________________COMMON PORTS________________________________
    ------------- Common Block  - Dynamic Reconfiguration Port (DRP) -----------
    signal  gt0_drpaddr_common_i            : std_logic_vector(7 downto 0);
    signal  gt0_drpdi_common_i              : std_logic_vector(15 downto 0);
    signal  gt0_drpdo_common_i              : std_logic_vector(15 downto 0);
    signal  gt0_drpen_common_i              : std_logic;
    signal  gt0_drprdy_common_i             : std_logic;
    signal  gt0_drpwe_common_i              : std_logic;
    -------------------------- Common Block - PLL Ports ------------------------
    signal  gt0_pll0lock_i                  : std_logic;
    signal  gt0_pll0refclklost_i            : std_logic;
    signal  gt0_pll0reset_i                 : std_logic;

    ------------------------------- Global Signals -----------------------------
    signal  gt0_tx_system_reset_c           : std_logic;
    signal  gt0_rx_system_reset_c           : std_logic;
    signal  tied_to_ground_i                : std_logic;
    signal  tied_to_ground_vec_i            : std_logic_vector(63 downto 0);
    signal  tied_to_vcc_i                   : std_logic;
    signal  tied_to_vcc_vec_i               : std_logic_vector(7 downto 0);
    signal  drpclk_in_i                     : std_logic;
     
    signal  GTTXRESET_IN                    : std_logic;
    signal  GTRXRESET_IN                    : std_logic;
    signal  PLL0RESET_IN                    : std_logic;
    signal  PLL1RESET_IN                    : std_logic;

    attribute keep: string;
   ------------------------------- User Clocks ---------------------------------
    signal    gt0_txusrclk_i                  : std_logic; 
    signal    gt0_txusrclk2_i                 : std_logic; 
    signal    gt0_rxusrclk_i                  : std_logic; 
    signal    gt0_rxusrclk2_i                 : std_logic; 
    attribute keep of gt0_txusrclk_i : signal is "true";
    attribute keep of gt0_txusrclk2_i : signal is "true";
    attribute keep of gt0_rxusrclk_i : signal is "true";
    attribute keep of gt0_rxusrclk2_i : signal is "true";
    ----------------------------- Reference Clocks ----------------------------
    signal    q0_clk1_refclk_i                : std_logic;
    ----------------------- Frame check/gen Module Signals --------------------     
    signal    gt0_matchn_i                    : std_logic;
    signal    gt0_txcharisk_float_i           : std_logic_vector(5 downto 0);
    signal    gt0_txdata_float16_i            : std_logic_vector(15 downto 0);
    signal    gt0_txdata_float_i              : std_logic_vector(43 downto 0);
    signal    gt0_track_data_i                : std_logic;
    signal    gt0_block_sync_i                : std_logic;
    signal    gt0_error_count_i               : std_logic_vector(7 downto 0);
    signal    gt0_frame_check_reset_i         : std_logic;
    signal    gt0_inc_in_i                    : std_logic;
    signal    gt0_inc_out_i                   : std_logic;
    signal    gt0_unscrambled_data_i          : std_logic_vector(19 downto 0);
    signal    reset_on_data_error_i           : std_logic;
    signal    track_data_out_i                : std_logic;
    ----------------------- Chipscope Signals ---------------------------------
    signal  tx_data_vio_control_i           : std_logic_vector(35 downto 0);
    signal  rx_data_vio_control_i           : std_logic_vector(35 downto 0);
    signal  shared_vio_control_i            : std_logic_vector(35 downto 0);
    signal  ila_control_i                   : std_logic_vector(35 downto 0);
    signal  channel_drp_vio_control_i       : std_logic_vector(35 downto 0);
    signal  common_drp_vio_control_i        : std_logic_vector(35 downto 0);
    signal  tx_data_vio_async_in_i          : std_logic_vector(31 downto 0);
    signal  tx_data_vio_sync_in_i           : std_logic_vector(31 downto 0);
    signal  tx_data_vio_async_out_i         : std_logic_vector(31 downto 0);
    signal  tx_data_vio_sync_out_i          : std_logic_vector(31 downto 0);
    signal  rx_data_vio_async_in_i          : std_logic_vector(31 downto 0);
    signal  rx_data_vio_sync_in_i           : std_logic_vector(31 downto 0);
    signal  rx_data_vio_async_out_i         : std_logic_vector(31 downto 0);
    signal  rx_data_vio_sync_out_i          : std_logic_vector(31 downto 0);
    signal  shared_vio_in_i                 : std_logic_vector(31 downto 0);
    signal  shared_vio_out_i                : std_logic_vector(31 downto 0);
    signal  ila_in_i                        : std_logic_vector(163 downto 0);
    signal  channel_drp_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  channel_drp_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  channel_drp_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  channel_drp_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  common_drp_vio_async_in_i       : std_logic_vector(31 downto 0);
    signal  common_drp_vio_sync_in_i        : std_logic_vector(31 downto 0);
    signal  common_drp_vio_async_out_i      : std_logic_vector(31 downto 0);
    signal  common_drp_vio_sync_out_i       : std_logic_vector(31 downto 0);

    signal  gt0_tx_data_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  gt0_tx_data_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  gt0_tx_data_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  gt0_tx_data_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  gt0_rx_data_vio_async_in_i      : std_logic_vector(31 downto 0);
    signal  gt0_rx_data_vio_sync_in_i       : std_logic_vector(31 downto 0);
    signal  gt0_rx_data_vio_async_out_i     : std_logic_vector(31 downto 0);
    signal  gt0_rx_data_vio_sync_out_i      : std_logic_vector(31 downto 0);
    signal  gt0_channel_drp_vio_async_in_i  : std_logic_vector(31 downto 0);
    signal  gt0_channel_drp_vio_sync_in_i   : std_logic_vector(31 downto 0);
    signal  gt0_channel_drp_vio_async_out_i : std_logic_vector(31 downto 0);
    signal  gt0_channel_drp_vio_sync_out_i  : std_logic_vector(31 downto 0);
    signal  gt0_common_drp_vio_async_in_i   : std_logic_vector(31 downto 0);
    signal  gt0_common_drp_vio_sync_in_i    : std_logic_vector(31 downto 0);
    signal  gt0_common_drp_vio_async_out_i  : std_logic_vector(31 downto 0);
    signal  gt0_common_drp_vio_sync_out_i   : std_logic_vector(31 downto 0);


    signal    gttxreset_i                   : std_logic;
    signal    gtrxreset_i                   : std_logic;
                                           
    signal    user_tx_reset_i               : std_logic;
    signal    user_rx_reset_i               : std_logic;
    signal    tx_vio_clk_i                  : std_logic;
    signal    tx_vio_clk_mux_out_i          : std_logic;    
    signal    rx_vio_ila_clk_i              : std_logic;
    signal    rx_vio_ila_clk_mux_out_i      : std_logic;    
                                           
    signal    pll0reset_i                   : std_logic;
    signal    pll1reset_i                   : std_logic;
    signal    pll0pd_i                      : std_logic;
    signal    pll1pd_i                      : std_logic;

    signal  soft_reset_i                    : std_logic;
    signal  cpllreset_i                     : std_logic;
    
    signal  sys_clk                         : std_logic;
     
    signal  picxo_rst0                      : STD_LOGIC_VECTOR(7 downto 0);

    attribute shreg_extract                 : string;
    attribute equivalent_register_removal   : string;
    attribute equivalent_register_removal of picxo_rst0   : signal is "no";    
    attribute shreg_extract               of picxo_rst0   : signal is "no";    
    
 <: if { $gt_type == "NO_GT"} { :>   
    signal    picxo_rst_nogt                : std_logic_vector(7 downto 0) := (others =>'0');
    attribute shreg_extract of picxo_rst_nogt : signal is "no";
    signal  G1_nogt                              : STD_LOGIC_VECTOR (4 downto 0) ;
    signal  G2_nogt                              : STD_LOGIC_VECTOR (4 downto 0) ;
    signal  R_nogt                               : STD_LOGIC_VECTOR (15 downto 0);
    signal  V_nogt                               : STD_LOGIC_VECTOR (15 downto 0);
    signal  ce_dsp_rate_nogt                     : std_logic_vector (15 downto 0);
<: } :>      
    signal  G1                              : STD_LOGIC_VECTOR (4 downto 0) ;
    signal  G2                              : STD_LOGIC_VECTOR (4 downto 0) ;
    signal  R                               : STD_LOGIC_VECTOR (15 downto 0);
    signal  V                               : STD_LOGIC_VECTOR (15 downto 0);
    signal  ce_dsp_rate                     : std_logic_vector (15 downto 0);
    signal  C                               : STD_LOGIC_VECTOR (6 downto 0) ;
    signal  P                               : STD_LOGIC_VECTOR (9 downto 0) ;
    signal  N                               : STD_LOGIC_VECTOR (9 downto 0) ;
    signal  don                             : STD_LOGIC_VECTOR (0 downto 0) ;
    
    signal  Offset_ppm                      : STD_LOGIC_VECTOR (21 downto 0);
    signal  Offset_en                       : std_logic                     ;
    signal  hold                            : std_logic                     ;
    signal  rsigce                          : std_logic                     ;
    signal  vsigce                          : std_logic                     ;
    signal  acc_step                        : STD_LOGIC_VECTOR (3 downto 0) ;
    signal  error_o                         : STD_LOGIC_VECTOR (20 downto 0);
    signal  volt_o                          : STD_LOGIC_VECTOR (21 downto 0);
    signal  ce_pi_o                         : std_logic                     ;
    signal  ce_pi2_o                        : std_logic                     ;
    signal  ce_dsp_o                        : std_logic                     ;
    signal  ovf_pd                          : std_logic                     ;
    signal  ovf_ab                          : std_logic                     ;
    signal  ovf_volt                        : std_logic                     ;
    signal  ovf_int                         : std_logic                     ;
 <: if { $gt_type == "NO_GT"} { :>     
    signal  acc_step_nogt                   : STD_LOGIC_VECTOR (3 downto 0)  ;
    signal acc_data_nogt                    : STD_LOGIC_VECTOR (4 downto 0)  ;
    signal error_o_nogt                     : STD_LOGIC_VECTOR (20 downto 0) ;
    signal volt_o_nogt                      : STD_LOGIC_VECTOR (21 downto 0) ;
    signal drpdata_short_o_nogt             : STD_LOGIC_VECTOR (7  downto 0) ;
    signal ce_pi_o_nogt                     : STD_LOGIC ;
    signal ce_pi2_o_nogt                    : STD_LOGIC ;
    signal ce_dsp_o_nogt                    : STD_LOGIC ;
    signal ovf_pd_nogt                      : STD_LOGIC ;
    signal ovf_ab_nogt                      : STD_LOGIC ;
    signal ovf_volt_nogt                    : STD_LOGIC ;
    signal ovf_int_nogt                     : STD_LOGIC ;
<: } :> 
    
    signal  gt0_txpippmstepsize_i           : STD_LOGIC_VECTOR (4 downto 0);

    signal  sys_clk_200                     : std_logic                     ;

    function and_reduce(arg: STD_LOGIC_VECTOR) return std_logic is
        variable result: std_logic;
    begin
        result := '1';
        for i in arg'range loop
            result := result and arg(i);
        end loop;
        return result;
    end;

    -- WA CR#856942 mark_debug not getting applied automatically on the signals connected to ILA, removed for 2015.3 
    --attribute mark_debug : string;
    --attribute mark_debug of error_o,volt_o,ce_pi_o,ce_pi2_o,ce_dsp_o,ovf_pd,ovf_ab,ovf_volt,ovf_int : signal is "true";
    
begin

    --  Static signal Assigments
    tied_to_ground_i           <= '0';
    tied_to_ground_vec_i       <= x"0000000000000000";
    tied_to_vcc_i              <= '1';
    tied_to_vcc_vec_i          <= "11111111";

    sys_clk_bufg_inst : IBUFGDS generic map (IOSTANDARD => "DEFAULT") port map(I=>SYS_CLK_P_IN, IB =>SYS_CLK_N_IN, O=>sys_clk_200);
 
    gt_usrclk_source : gtwizard_0_GT_USRCLK_SOURCE
    port map
    (
        Q0_CLK1_GTREFCLK_PAD_N_IN       =>      Q0_CLK1_GTREFCLK_PAD_N_IN,
        Q0_CLK1_GTREFCLK_PAD_P_IN       =>      Q0_CLK1_GTREFCLK_PAD_P_IN,
        Q0_CLK1_GTREFCLK_OUT            =>      q0_clk1_refclk_i,
 
        GT0_TXUSRCLK_OUT                =>      gt0_txusrclk_i,
        GT0_TXUSRCLK2_OUT               =>      gt0_txusrclk2_i,
        GT0_TXOUTCLK_IN                 =>      gt0_txoutclk_i,
        GT0_RXUSRCLK_OUT                =>      gt0_rxusrclk_i,
        GT0_RXUSRCLK2_OUT               =>      gt0_rxusrclk2_i,
        DRPCLK_IN                       =>      sys_clk_200,
        DRPCLK_OUT                      =>      sys_clk

    );

    ----------------------------- The GT Wrapper -----------------------------
    -- Use the instantiation template in the example directory to add the GT wrapper to your design.
    -- In this example, the wrapper is wired up for basic operation with a frame generator and frame 
    -- checker. The GTs will reset, then attempt to align and transmit data. If channel bonding is 
    -- enabled, bonding should occur after alignment.

    gtwizard_0_init_i : gtwizard_0_init
    generic map
    (
        EXAMPLE_SIM_GTRESET_SPEEDUP     =>      EXAMPLE_SIM_GTRESET_SPEEDUP,
        EXAMPLE_SIMULATION              =>      EXAMPLE_SIMULATION,
        STABLE_CLOCK_PERIOD             =>      STABLE_CLOCK_PERIOD,
        EXAMPLE_USE_CHIPSCOPE           =>      EXAMPLE_USE_SCOPE
    )
    port map
    (
        SYSCLK_IN                       =>      sys_clk,
        SOFT_RESET_IN                   =>      soft_reset_i,
        DONT_RESET_ON_DATA_ERROR_IN     =>      tied_to_ground_i,
        GT0_TX_FSM_RESET_DONE_OUT       =>      gt0_txfsmresetdone_i,
        GT0_RX_FSM_RESET_DONE_OUT       =>      gt0_rxfsmresetdone_i,
        GT0_DATA_VALID_IN               =>      '1',
        --_____________________________________________________________________
        --GT0  (X0Y0)
        ---------------------------- Channel - DRP Ports  --------------------------
        gt0_drpaddr_in                  =>      gt0_drpaddr_i,
        gt0_drpclk_in                   =>      sys_clk,
        gt0_drpdi_in                    =>      gt0_drpdi_i,
        gt0_drpdo_out                   =>      gt0_drpdo_i,
        gt0_drpen_in                    =>      gt0_drpen_i,
        gt0_drprdy_out                  =>      gt0_drprdy_i,
        gt0_drpwe_in                    =>      gt0_drpwe_i,
        ----------------------------- PCI Express Ports ----------------------------
        gt0_rxrate_in                   =>      gt0_rxrate_i,
        --------------------- RX Initialization and Reset Ports --------------------
        gt0_rxuserrdy_in                =>      gt0_rxuserrdy_i,
        -------------------------- RX Margin Analysis Ports ------------------------
        gt0_eyescandataerror_out        =>      gt0_eyescandataerror_i,
        ------------------------- Receive Ports - CDR Ports ------------------------
        gt0_rxcdrlock_out               =>      gt0_rxcdrlock_i,
        ------------------ Receive Ports - FPGA RX Interface Ports -----------------
        gt0_rxdata_out                  =>      gt0_rxdata_i,
        gt0_rxusrclk_in                 =>      gt0_txusrclk_i,
        gt0_rxusrclk2_in                =>      gt0_txusrclk_i,
        ------------------------ Receive Ports - RX AFE Ports ----------------------
        gt0_gtprxn_in                   =>      RXN_IN,
        gt0_gtprxp_in                   =>      RXP_IN,
        -------------------- Receive Ports - RX Equailizer Ports -------------------
        gt0_rxlpmhfhold_in              =>      gt0_rxlpmhfhold_i,
        gt0_rxlpmlfhold_in              =>      gt0_rxlpmlfhold_i,
        ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
        gt0_rxoutclk_out                =>      gt0_rxoutclk_i,
        gt0_rxratedone_out              =>      gt0_rxratedone_i,
        ------------- Receive Ports - RX Initialization and Reset Ports ------------
        gt0_gtrxreset_in                =>      gt0_gtrxreset_i,
        gt0_rxpmareset_in               =>      gt0_rxpmareset_i,
        -------------- Receive Ports -RX Initialization and Reset Ports ------------
        gt0_rxresetdone_out             =>      gt0_rxresetdone_i,
        ------------------------ TX Configurable Driver Ports ----------------------
        gt0_txpostcursor_in             =>      gt0_txpostcursor_i,
        gt0_txprecursor_in              =>      gt0_txprecursor_i,
        --------------------- TX Initialization and Reset Ports --------------------
        gt0_gttxreset_in                =>      gt0_gttxreset_i,
        gt0_txuserrdy_in                =>      gt0_txuserrdy_i,
        ------------------ Transmit Ports - FPGA TX Interface Ports ----------------
        gt0_txdata_in                   =>      gt0_rxdata_i,
        gt0_txusrclk_in                 =>      gt0_txusrclk_i,
        gt0_txusrclk2_in                =>      gt0_txusrclk_i,
        --------------------- Transmit Ports - PCI Express Ports -------------------
        gt0_txrate_in                   =>      gt0_txrate_i,
        --------------- Transmit Ports - TX Configurable Driver Ports --------------
        gt0_gtptxn_out                  =>      TXN_OUT,
        gt0_gtptxp_out                  =>      TXP_OUT,
        gt0_txdiffctrl_in               =>      gt0_txdiffctrl_i,
        ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
        gt0_txoutclk_out                =>      gt0_txoutclk_i,
        gt0_txoutclkfabric_out          =>      gt0_txoutclkfabric_i,
        gt0_txoutclkpcs_out             =>      gt0_txoutclkpcs_i,
        gt0_txratedone_out              =>      gt0_txratedone_i,
        ------------- Transmit Ports - TX Initialization and Reset Ports -----------
        gt0_txresetdone_out             =>      gt0_txresetdone_i,
        ---TXPI---
        gt0_txppmstepsize_in            =>      gt0_txpippmstepsize_i,
    --____________________________COMMON PORTS________________________________
        ------------- Common Block  - Dynamic Reconfiguration Port (DRP) -----------
        gt0_drpaddr_common_in           =>      gt0_drpaddr_common_i,
        gt0_drpclk_common_in            =>      sys_clk,
        gt0_drpdi_common_in             =>      gt0_drpdi_common_i,
        gt0_drpdo_common_out            =>      gt0_drpdo_common_i,
        gt0_drpen_common_in             =>      gt0_drpen_common_i,
        gt0_drprdy_common_out           =>      gt0_drprdy_common_i,
        gt0_drpwe_common_in             =>      gt0_drpwe_common_i,
        ----------------- Common Block - GTPE2_COMMON Clocking Ports ---------------
        gt0_gtrefclk0_in                =>      q0_clk1_refclk_i,
        -------------------------- Common Block - PLL Ports ------------------------
        gt0_pll0lock_out                =>      gt0_pll0lock_i,
        gt0_pll0lockdetclk_in           =>      sys_clk,
        gt0_pll0reset_in                =>      gt0_pll0reset_i

    );

--------------------------------------------------------------------------------------
------------------ PICXO -------------------------------------------------------------
--------------------------------------------------------------------------------------
bufg_rxoutclk: bufg port map (i=> gt0_rxoutclk_i, o => gt0_rxoutclk_bufg);
gt0_txusrclk_o <= gt0_txusrclk_i;

 <: if { $gt_type == "NO_GT"} { :> 
 <=: $ComponentName :>_i : <=: $ComponentName :>
     PORT MAP (
          REF_CLK_I        => gt0_rxoutclk_bufg         ,
          RESET_I          => picxo_rst_nogt(7)             ,
          DRPEN_O          => open                      ,
          DRPWEN_O         => open                      ,
          DRPRDY_I         => '1'                       ,
          DRPDO_I          => X"0000"                   ,
          DRPDATA_O        => open                      ,
          DRPADDR_O        => open                      ,
          DRPBUSY_O        => open                      ,
          TXOUTCLK_I       => sys_clk                   ,
          RSIGCE_I         => rsigce                    ,
          VSIGCE_I         => acc_data_nogt(0)          ,
          VSIGCE_O         => open                      ,
          ACC_STEP         => "0001"                    ,
          G1               => G1_nogt                   ,
          G2               => G2_nogt                   ,
          R                => R_nogt                    ,
          V                => V_nogt                    ,
          C_I              => C                         ,
          P_I              => P                         ,
          N_I              => N                         ,
          DON_I            => don                       ,
          OFFSET_PPM       => Offset_ppm                ,
          OFFSET_EN        => Offset_en                 ,
          HOLD             => hold                      ,
          CE_DSP_RATE      => ce_dsp_rate_nogt               ,
          --DRP USER PORT
          DRP_USER_REQ_I   => '0'                       ,
          DRP_USER_DONE_I  => '0'                       ,
          DRPEN_USER_I     => '0'                       ,
          DRPWEN_USER_I    => '0'                       ,
          DRPDATA_USER_I   => (others=>'0')             ,
          DRPDATA_USER_O   => open                      ,
          DRPADDR_USER_I   => (others=>'0')             ,
          DRPRDY_USER_O    => open                      ,
          ACC_DATA         => acc_data_nogt             ,
          --DEBUG PORT
          ERROR_O          => error_o_nogt              ,
          VOLT_O           => volt_o_nogt               ,
          DRPDATA_SHORT_O  => open                      ,
          CE_PI_O          => ce_pi_o_nogt              ,
          CE_PI2_O         => ce_pi2_o_nogt             ,
          CE_DSP_O         => ce_dsp_o_nogt             , 
          OVF_PD           => ovf_pd_nogt               ,  
          OVF_AB           => ovf_ab_nogt               ,
          OVF_VOLT         => ovf_volt_nogt             ,
          OVF_INT          => ovf_int_nogt             
        );      

 <=: $ComponentName :>_with_gt_i : <=: $ComponentName :>_with_gt
     PORT MAP (
          REF_CLK_I        => acc_data_nogt(0)          ,
          RESET_I          => picxo_rst0(7)             ,
          DRPEN_O          => open                      ,
          DRPWEN_O         => open                      ,
          DRPRDY_I         => '0'                       ,
          DRPDO_I          => X"0000"                   ,
          DRPDATA_O        => open                      ,
          DRPADDR_O        => open                      ,
          DRPBUSY_O        => open                      ,
          TXOUTCLK_I       => gt0_txusrclk_i            ,
          RSIGCE_I         => rsigce                    ,
          VSIGCE_I         => vsigce                    ,
          VSIGCE_O         => open                      ,
          ACC_STEP         => acc_step                  ,
          G1               => G1                        ,
          G2               => G2                        ,
          R                => R                         ,
          V                => V                         ,
          C_I              => C                         ,
          P_I              => P                         ,
          N_I              => N                         ,
          DON_I            => don                       ,
          OFFSET_PPM       => Offset_ppm                ,
          OFFSET_EN        => Offset_en                 ,
          HOLD             => hold                      ,
          CE_DSP_RATE      => ce_dsp_rate               ,
          --DRP USER PORT
          DRP_USER_REQ_I   => '0'                       ,
          DRP_USER_DONE_I  => '0'                       ,
          DRPEN_USER_I     => '0'                       ,
          DRPWEN_USER_I    => '0'                       ,
          DRPDATA_USER_I   => (others=>'0')             ,
          DRPDATA_USER_O   => open                      ,
          DRPADDR_USER_I   => (others=>'0')             ,
          DRPRDY_USER_O    => open                      ,
          ACC_DATA         => gt0_txpippmstepsize_i     ,
          --DEBUG PORT
          ERROR_O          => error_o                   ,
          VOLT_O           => volt_o                    ,
          DRPDATA_SHORT_O  => open                      ,
          CE_PI_O          => ce_pi_o                   ,
          CE_PI2_O         => ce_pi2_o                  ,
          CE_DSP_O         => ce_dsp_o                  ,
          OVF_PD           => ovf_pd                    ,
          OVF_AB           => ovf_ab                    ,
          OVF_VOLT         => ovf_volt                  ,
          OVF_INT          => ovf_int          
        ); 	
  <: } :>
  
 <: if { $gt_type != "NO_GT" } { :> 
 <=: $ComponentName :>_i : <=: $ComponentName :>
     PORT MAP (
          REF_CLK_I        => gt0_rxoutclk_bufg         ,
          RESET_I          => picxo_rst0(7)             ,
          DRPEN_O          => open                      ,
          DRPWEN_O         => open                      ,
          DRPRDY_I         => '0'                       ,
          DRPDO_I          => X"0000"                   ,
          DRPDATA_O        => open                      ,
          DRPADDR_O        => open                      ,
          DRPBUSY_O        => open                      ,
          TXOUTCLK_I       => gt0_txusrclk_i            ,
          RSIGCE_I         => '1'                       ,
          VSIGCE_I         => '1'                       ,
          VSIGCE_O         => open                      ,
          ACC_STEP         => acc_step                  ,
          G1               => G1                        ,
          G2               => G2                        ,
          R                => R                         ,
          V                => V                         ,
          C_I              => C                         ,
          P_I              => P                         ,
          N_I              => N                         ,
          DON_I            => don                       ,
          OFFSET_PPM       => Offset_ppm                ,
          OFFSET_EN        => Offset_en                 ,
          HOLD             => hold                      ,
          CE_DSP_RATE      => ce_dsp_rate               ,
          --DRP USER PORT
          DRP_USER_REQ_I   => '0'                       ,
          DRP_USER_DONE_I  => '0'                       ,
          DRPEN_USER_I     => '0'                       ,
          DRPWEN_USER_I    => '0'                       ,
          DRPDATA_USER_I   => (others=>'0')             ,
          DRPDATA_USER_O   => open                      ,
          DRPADDR_USER_I   => (others=>'0')             ,
          DRPRDY_USER_O    => open                      ,
          ACC_DATA         => gt0_txpippmstepsize_i     ,
          --DEBUG PORT
          ERROR_O          => error_o                   ,
          VOLT_O           => volt_o                    ,
          DRPDATA_SHORT_O  => open                      ,
          CE_PI_O          => ce_pi_o                   ,
          CE_PI2_O         => ce_pi2_o                  ,
          CE_DSP_O         => ce_dsp_o                  ,
          OVF_PD           => ovf_pd                    ,
          OVF_AB           => ovf_ab                    ,
          OVF_VOLT         => ovf_volt                  ,
          OVF_INT          => ovf_int          
        );   
<: } :>   
                                              
-------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
     
    process (gt0_txusrclk_i, picxo_rst0, gt0_gttxreset_i)
    begin
       if(picxo_rst0(0) = '1' or gt0_gttxreset_i ='1') then
            picxo_rst0 (7 downto 1)     <= "1111111";
       elsif rising_edge (gt0_txusrclk_i) then
            picxo_rst0 (7 downto 1)     <=  picxo_rst0(6 downto 0);
    end if;
    end process;   

<: if { $gt_type == "NO_GT" } { :> 
   
   process (gt0_txusrclk_i, picxo_rst_nogt, gt0_gttxreset_i)
    begin
       if(picxo_rst_nogt(0) = '1' or gt0_gttxreset_i ='1') then
            picxo_rst_nogt (7 downto 1)     <= (others=>'1');
       elsif rising_edge (gt0_txusrclk_i) then
            picxo_rst_nogt (7 downto 1)     <=  picxo_rst_nogt(6 downto 0);
    end if;
    end process;   
    
<: } :>           
    
    gt0_gtrxreset_i <= gtrxreset_i or not gt0_pll0lock_i;
    gt0_gttxreset_i <= gttxreset_i or not gt0_pll0lock_i;
    gt0_pll0reset_i <= pll0reset_i or PLL0_RESET_IN;
   
                                    
----------------------------- Chipscope Connections -----------------------
    -- When the example design is run in hardware, it uses chipscope to allow the
    -- example design and GT wrapper to be controlled and monitored. The 
    -- EXAMPLE_USE_SCOPE parameter allows chipscope to be removed for simulation.

debug : if EXAMPLE_USE_SCOPE = 1 generate
    
--  PICXCO ILA
<: if { $gt_type == "NO_GT"} { :> 
  
picxo_ila_no_gt : picxo_ila
  PORT MAP (
    clk         => sys_clk               ,
    probe0      => error_o_nogt          ,
    probe1      => volt_o_nogt           ,
    probe2      => (others=>'0')         ,
    probe3(0)   => ce_pi_o_nogt          ,
    probe4(0)   => ce_pi2_o_nogt         ,
    probe5(0)   => ce_dsp_o_nogt         ,  
    probe6(0)   => ovf_pd_nogt           , 
    probe7(0)   => ovf_ab_nogt           ,
    probe8(0)   => ovf_volt_nogt         ,
    probe9(0)   => ovf_int_nogt        
  );

picxo_vio_no_gt : picxo_vio
    PORT MAP (
      clk            => sys_clk              ,
      probe_out0     => G1_nogt (4 downto 0) ,
      probe_out1     => G2_nogt (4 downto 0) ,
      probe_out2     => R_nogt               ,
      probe_out3     => V_nogt               ,
      probe_out4     => acc_step_nogt        ,
      probe_out5     => ce_dsp_rate_nogt     ,
      probe_out6     => open                 ,
      probe_out7(0)  => open                 ,
      probe_out8(0)  => open                 ,
      probe_out9(0)  => picxo_rst_nogt(0)    ,
      probe_out10(0) => open                 ,
      probe_out11    => open
    );  
    
<: } :>   
picxo_ila_i : picxo_ila
  PORT MAP (
    clk         => gt0_txusrclk_i            ,
    probe0      => error_o                   ,
    probe1      => volt_o                    ,
    probe2      => (others=>'0')             ,
    probe3(0)   => ce_pi_o                   ,
    probe4(0)   => ce_pi2_o                  ,
    probe5(0)   => ce_dsp_o                  , 
    probe6(0)   => ovf_pd                    , 
    probe7(0)   => ovf_ab                    ,
    probe8(0)   => ovf_volt                  ,
    probe9(0)   => ovf_int
  );
  

picxo_vio_i : picxo_vio
  PORT MAP (
    clk            => gt0_txusrclk_i  ,
    probe_out0     => G1 (4 downto 0) ,
    probe_out1     => G2 (4 downto 0) ,
    probe_out2     => R               ,
    probe_out3     => V               ,
    probe_out4     => acc_step        ,
    probe_out5     => ce_dsp_rate     ,
    probe_out6     => Offset_ppm      ,
    probe_out7(0)  => Offset_en       ,
    probe_out8(0)  => hold            ,
    probe_out9(0)  => picxo_rst0(0)   ,
    probe_out10(0) => cpllreset_i     ,
    probe_out11    => don
  );                                
    

--   Shared VIO for all transievers 
     shared_vio_i : data_vio
     port map(
             clk          =>  sys_clk,
             PROBE_IN0    =>  shared_vio_in_i,
             PROBE_OUT0   =>  shared_vio_out_i,
             PROBE_IN1    =>  tied_to_ground_vec_i(31 downto 0),
             PROBE_OUT1   =>  open
             );
    
--   TX VIO 
     tx_data_vio_i : data_vio
     port map(
             clk          =>  gt0_txusrclk_i,
             PROBE_IN0    =>  tx_data_vio_async_in_i,
             PROBE_OUT0   =>  tx_data_vio_async_out_i,
             PROBE_IN1    =>  tx_data_vio_sync_in_i,
             PROBE_OUT1   =>  tx_data_vio_sync_out_i
             );
    
--    RX VIO 
     rx_data_vio_i : data_vio
     port map(
             clk         =>  gt0_txusrclk_i,
             PROBE_IN0   =>  rx_data_vio_async_in_i,
             PROBE_OUT0  =>  rx_data_vio_async_out_i,
             PROBE_IN1   =>  rx_data_vio_sync_in_i,
             PROBE_OUT1  =>  rx_data_vio_sync_out_i
             );

    rsigce           <= '1';
    vsigce           <= '1';

    -- Shared VIO Outputs
    gttxreset_i                                  <= shared_vio_out_i(31);
    gtrxreset_i                                  <= shared_vio_out_i(30);
    user_tx_reset_i                              <= shared_vio_out_i(29);
    user_rx_reset_i                              <= shared_vio_out_i(28);
    pll0reset_i                                  <= shared_vio_out_i(27);
    soft_reset_i                                 <= shared_vio_out_i(26);
    SFP_TX_DISABLE_OUT(0)                        <= shared_vio_out_i(0);
    
    -- Shared VIO Inputs
    shared_vio_in_i(31 downto 2)                 <= (others => '0');    
  
    shared_vio_in_i(1)                           <= SFP_LOS_IN(0);
    shared_vio_in_i(0)                           <= gt0_pll0lock_i;    
    
    -- Chipscope connections on GT 0
    gt0_tx_data_vio_async_in_i(31 downto 1)      <= (others => '0');
    gt0_tx_data_vio_async_in_i(0)                <= gt0_txfsmresetdone_i ;
     
    gt0_tx_data_vio_sync_in_i(31)                <= gt0_txresetdone_i    ;
    gt0_tx_data_vio_sync_in_i(30 downto 0)       <= (others => '0')      ;
    
    gt0_txuserrdy_i                              <= tx_data_vio_sync_out_i(31);
    gt0_txrate_i                                 <= tx_data_vio_sync_out_i(30 downto 28);
    gt0_txdiffctrl_i                             <= tx_data_vio_sync_out_i(27 downto 24);     
    gt0_txprecursor_i                            <= tx_data_vio_sync_out_i(23 downto 19);
    gt0_txpostcursor_i                           <= tx_data_vio_sync_out_i(18 downto 14);
    
    gt0_rx_data_vio_async_in_i(31 downto 1)      <= (others => '0') ;
    gt0_rx_data_vio_async_in_i(0)                <= gt0_rxfsmresetdone_i;     

    gt0_rx_data_vio_sync_in_i(31)                <= gt0_rxresetdone_i;
    gt0_rx_data_vio_sync_in_i(30 downto 0)       <= (others => '0') ;
 
    gt0_rxuserrdy_i                              <= rx_data_vio_sync_out_i(31);   
    gt0_rxrate_i                                 <= rx_data_vio_sync_out_i(30 downto 28);


    tx_data_vio_async_in_i                       <= gt0_tx_data_vio_async_in_i;
    tx_data_vio_sync_in_i                        <= gt0_tx_data_vio_sync_in_i;
    rx_data_vio_async_in_i                       <= gt0_rx_data_vio_async_in_i;
    rx_data_vio_sync_in_i                        <= gt0_rx_data_vio_sync_in_i;

    C<= (others =>'0');
    P<= (others =>'0');
    N<= (others =>'0');

end generate debug;

no_debug : if EXAMPLE_USE_SCOPE = 0 generate

    R             <= R_i ;
    V             <= V_i ;
    G1            <= G1_i;
    G2            <= G2_i;
    C             <= C_i;
    N             <= N_i;
    P             <= P_i;
    don           <= don_i;
    ce_dsp_rate   <= ce_dsp_rate_i  ;
    acc_step      <= acc_step_i   ;
    Offset_ppm    <= Offset_ppm_i ;
    Offset_en     <= Offset_en_i  ;
    hold          <= hold_i       ;
    picxo_rst0(0) <= '0'    ;
    rsigce        <= rsigce_i;
    vsigce        <= vsigce_i;

    gt0_pll0reset_i         <= PLL0_RESET_IN;
    gttxreset_i             <= tied_to_ground_i;
    gtrxreset_i             <= tied_to_ground_i;
    user_tx_reset_i         <= tied_to_ground_i;
    user_rx_reset_i         <= tied_to_ground_i;
    gt0_txprecursor_i       <= tied_to_ground_vec_i(4 downto 0);
    gt0_txpostcursor_i      <= tied_to_ground_vec_i(4 downto 0);
    gt0_txdiffctrl_i        <= tied_to_ground_vec_i(3 downto 0);
    gt0_txrate_i            <= tied_to_ground_vec_i(2 downto 0);
    gt0_rxrate_i            <= tied_to_ground_vec_i(2 downto 0);


    SFP_TX_DISABLE_OUT(0)   <= '1';
     
end generate no_debug;
end RTL;



















