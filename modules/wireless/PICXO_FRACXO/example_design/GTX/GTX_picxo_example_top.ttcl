<: setFileName "GTX_picxo_example_top" :>
<: setFileExtension ".vhd" :>
<: set ComponentName [getComponentNameString] :>
<: setOutputDirectory "./example_design/GTX" :>
<: set gt_type [ get_parameter_property GT_TYPE] :>
------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor: Xilinx
-- \   \   \/     Version : 3.0
--  \   \         Application : XAPP589 7 Series FPGA PICXO example design 
--  /   /         Filename : GTX_picxo_example_top.vhd
-- /___/   /\     Timestamp : v25_0 @ Fri Apr  8 11:26:58 +0100 2016 Rev: 815:817
-- \   \  /  \ 
--  \___\/\___\
--
-- 
-- Module GTX_picxo_example_top
-- Generated by Xilinx 7 Series FPGAs Transceivers Wizard
-- 
-- 
-- (c) Copyright 2009-2012 Xilinx, Inc. All rights reserved.
-- 
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
-- 
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
-- 
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
-- 
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES. 


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_misc.all;
library UNISIM;
use UNISIM.VCOMPONENTS.ALL;

entity GTX_picxo_example_top is
generic
(
    EXAMPLE_CONFIG_INDEPENDENT_LANES      : integer   := 1;
    EXAMPLE_LANE_WITH_START_CHAR          : integer   := 0;        
    EXAMPLE_WORDS_IN_BRAM                 : integer   := 512;      
    EXAMPLE_SIM_GTRESET_SPEEDUP           : string    := "FALSE";  
    EXAMPLE_SIMULATION                    : integer   := 0;        
    EXAMPLE_USE_SCOPE                     : integer   := 1
);
port
(
    SYS_RST                               : in   STD_LOGIC;
    Q2_CLK1_GTREFCLK_PAD_N_IN             : in   STD_LOGIC;
    Q2_CLK1_GTREFCLK_PAD_P_IN             : in   STD_LOGIC;
    SYS_CLK_P                             : in   STD_LOGIC;
    SYS_CLK_N                             : in   STD_LOGIC;
    CPLL_LOCK                             : out  STD_LOGIC; --LED0
    PRBS_ERR                              : out  STD_LOGIC; --LED1
    RXN_IN                                : in   STD_LOGIC;
    RXP_IN                                : in   STD_LOGIC;
    TXN_OUT                               : out  STD_LOGIC;
    TXP_OUT                               : out  STD_LOGIC;
    GTX0_TXUSERCLK_OUT                    : out  STD_LOGIC; 
    GTX0_RXUSERCLK_OUT                    : out  STD_LOGIC; 
    picxo_rst_i                           : in   STD_LOGIC;
--- PI_VCXO Coefficients
     G1_i                                 : in  STD_LOGIC_VECTOR (4 downto 0) ;
     G2_i                                 : in  STD_LOGIC_VECTOR (4 downto 0) ;
     R_i                                  : in  STD_LOGIC_VECTOR (15 downto 0);
     V_i                                  : in  STD_LOGIC_VECTOR (15 downto 0);
     ce_dsp_rate_i                        : in  std_logic_vector (15 downto 0);
     acc_step_i                           : in  std_logic_vector (3 downto 0) ;
---Coefficients reserved
     c_i                                  : in  STD_LOGIC_VECTOR (6 downto 0) ; 
     p_i                                  : in  STD_LOGIC_VECTOR (9 downto 0) ; 
     n_i                                  : in  STD_LOGIC_VECTOR (9 downto 0) ;   
     don_i                                : in  STD_LOGIC_VECTOR (0 downto 0) ;
-- Offset, hold
     Offset_ppm_i                         : in  STD_LOGIC_VECTOR (21 downto 0);
     Offset_en_i                          : in  STD_LOGIC                     ;
     hold_i                               : in  STD_LOGIC                     ;
     rsigce_i                             : in  STD_LOGIC                     ;
     vsigce_i                             : in  STD_LOGIC                     ;
--DRP user port
     drp_user_req_i                       : in  STD_LOGIC;
     drpen_user_i                         : in  STD_LOGIC;
     drpwen_user_i                        : in  STD_LOGIC;
     drpaddr_user_i                       : in  STD_LOGIC_VECTOR (8 downto 0) ;
     drpdata_user_i                       : in  STD_LOGIC_VECTOR (15 downto 0);
     drpdata_user_o                       : out STD_LOGIC_VECTOR (15 downto 0);
     drprdy_user_o                        : out STD_LOGIC;                                                       
     drpbusy_o                            : out STD_LOGIC         
 );
end GTX_picxo_example_top;
    
architecture RTL of GTX_picxo_example_top is

--**************************Component Declarations*****************************
component gtwizard_v2_4_picxo_example is
generic
(
    QPLL_FBDIV_TOP                 : integer  := 16;
    -- Simulation attributes
    WRAPPER_SIM_GTRESET_SPEEDUP     : string     :=  "false";        -- Set to "true" to speed up sim reset
    RX_DFE_KL_CFG2_IN               : bit_vector :=  X"3010D90C";
    PMA_RSV_IN                      : bit_vector :=  x"00018480";
    SIM_VERSION                     : string     :=  "4.0"

);
port
(
    --_________________________________________________________________________
    --GT0  (X0Y0)
    --____________________________CHANNEL PORTS________________________________
    --------------------------------- CPLL Ports -------------------------------
    GT0_CPLLFBCLKLOST_OUT                   : out  std_logic;
    GT0_CPLLLOCK_OUT                        : out  std_logic;
    GT0_CPLLLOCKDETCLK_IN                   : in   std_logic;
    GT0_CPLLREFCLKLOST_OUT                  : out  std_logic;
    GT0_CPLLRESET_IN                        : in   std_logic;
    -------------------------- Channel - Clocking Ports ------------------------
    GT0_GTREFCLK0_IN                        : in   std_logic;
    ---------------------------- Channel - DRP Ports  --------------------------
    GT0_DRPADDR_IN                          : in   std_logic_vector(8 downto 0);
    GT0_DRPCLK_IN                           : in   std_logic;
    GT0_DRPDI_IN                            : in   std_logic_vector(15 downto 0);
    GT0_DRPDO_OUT                           : out  std_logic_vector(15 downto 0);
    GT0_DRPEN_IN                            : in   std_logic;
    GT0_DRPRDY_OUT                          : out  std_logic;
    GT0_DRPWE_IN                            : in   std_logic;
    ------------------------------- Loopback Ports -----------------------------
    GT0_LOOPBACK_IN                         : in   std_logic_vector(2 downto 0);
    ----------------------------- PCI Express Ports ----------------------------
    GT0_RXRATE_IN                           : in   std_logic_vector(2 downto 0);
    --------------------- RX Initialization and Reset Ports --------------------
    GT0_RXUSERRDY_IN                        : in   std_logic;
    -------------------------- RX Margin Analysis Ports ------------------------
    GT0_EYESCANDATAERROR_OUT                : out  std_logic;
    ------------------------- Receive Ports - CDR Ports ------------------------
    GT0_RXCDRLOCK_OUT                       : out  std_logic;
    ------------------ Receive Ports - FPGA RX Interface Ports -----------------
    GT0_RXUSRCLK_IN                         : in   std_logic;
    GT0_RXUSRCLK2_IN                        : in   std_logic;
    ------------------ Receive Ports - FPGA RX interface Ports -----------------
    GT0_RXDATA_OUT                          : out  std_logic_vector(19 downto 0);
    --------------------------- Receive Ports - RX AFE -------------------------
    GT0_GTXRXP_IN                           : in   std_logic;
    ------------------------ Receive Ports - RX AFE Ports ----------------------
    GT0_GTXRXN_IN                           : in   std_logic;
    ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
    GT0_RXBUFRESET_IN                       : in   std_logic;
    GT0_RXBUFSTATUS_OUT                     : out  std_logic_vector(2 downto 0);
    --------------------- Receive Ports - RX Equalizer Ports -------------------
    GT0_RXDFELPMRESET_IN                    : in   std_logic;
    --------------------- Receive Ports - RX Equilizer Ports -------------------
    GT0_RXLPMHFHOLD_IN                      : in   std_logic;
    GT0_RXLPMLFHOLD_IN                      : in   std_logic;
    ------------ Receive Ports - RX Fabric ClocK Output Control Ports ----------
    GT0_RXRATEDONE_OUT                      : out  std_logic;
    --------------- Receive Ports - RX Fabric Output Control Ports -------------
    GT0_RXOUTCLK_OUT                        : out  std_logic;
    GT0_RXOUTCLKPCS_OUT                     : out  std_logic;
    ------------- Receive Ports - RX Initialization and Reset Ports ------------
    GT0_GTRXRESET_IN                        : in   std_logic;
    GT0_RXPCSRESET_IN                       : in   std_logic;
    GT0_RXPMARESET_IN                       : in   std_logic;
    -------------- Receive Ports -RX Initialization and Reset Ports ------------
    GT0_RXRESETDONE_OUT                     : out  std_logic;
    ------------------------ TX Configurable Driver Ports ----------------------
    GT0_TXPOSTCURSOR_IN                     : in   std_logic_vector(4 downto 0);
    GT0_TXPRECURSOR_IN                      : in   std_logic_vector(4 downto 0);
    --------------------- TX Initialization and Reset Ports --------------------
    GT0_GTTXRESET_IN                        : in   std_logic;
    GT0_TXUSERRDY_IN                        : in   std_logic;
    ------------------ Transmit Ports - FPGA TX Interface Ports ----------------
    GT0_TXUSRCLK_IN                         : in   std_logic;
    GT0_TXUSRCLK2_IN                        : in   std_logic;
    ---------------------- Transmit Ports - TX Buffer Ports --------------------
    GT0_TXBUFSTATUS_OUT                     : out  std_logic_vector(1 downto 0);
    --------------- Transmit Ports - TX Configurable Driver Ports --------------
    GT0_TXDIFFCTRL_IN                       : in   std_logic_vector(3 downto 0);
    ------------------ Transmit Ports - TX Data Path interface -----------------
    GT0_TXDATA_IN                           : in   std_logic_vector(19 downto 0);
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    GT0_GTXTXN_OUT                          : out  std_logic;
    GT0_GTXTXP_OUT                          : out  std_logic;
    ----------- Transmit Ports - TX Fabric Clock Output Control Ports ----------
    GT0_TXOUTCLK_OUT                        : out  std_logic;
    GT0_TXOUTCLKFABRIC_OUT                  : out  std_logic;
    GT0_TXOUTCLKPCS_OUT                     : out  std_logic;
    ------------- Transmit Ports - TX Initialization and Reset Ports -----------
    GT0_TXPCSRESET_IN                       : in   std_logic;
    GT0_TXRESETDONE_OUT                     : out  std_logic;
    --____________________________COMMON PORTS________________________________
    ------------- Common Block  - Dynamic Reconfiguration Port (DRP) -----------
    GT0_DRPADDR_COMMON_IN                   : in   std_logic_vector(7 downto 0);
    GT0_DRPCLK_COMMON_IN                    : in   std_logic;
    GT0_DRPDI_COMMON_IN                     : in   std_logic_vector(15 downto 0);
    GT0_DRPDO_COMMON_OUT                    : out  std_logic_vector(15 downto 0);
    GT0_DRPEN_COMMON_IN                     : in   std_logic;
    GT0_DRPRDY_COMMON_OUT                   : out  std_logic;
    GT0_DRPWE_COMMON_IN                     : in   std_logic;
    ---------------------- Common Block  - Ref Clock Ports ---------------------
    GT0_GTREFCLK0_COMMON_IN                 : in   std_logic;
    ------------------------- Common Block - QPLL Ports ------------------------
    GT0_QPLLLOCK_OUT                        : out  std_logic;
    GT0_QPLLLOCKDETCLK_IN                   : in   std_logic;
    GT0_QPLLREFCLKLOST_OUT                  : out  std_logic;
    GT0_QPLLRESET_IN                        : in   std_logic
);
end component;

component gtwizard_v2_4_GT_USRCLK_SOURCE is
port
(
    Q0_CLK1_GTREFCLK_PAD_N_IN               : in   std_logic;
    Q0_CLK1_GTREFCLK_PAD_P_IN               : in   std_logic;
    Q0_CLK1_GTREFCLK_OUT                    : out  std_logic;
 
    GT0_TXUSRCLK_OUT             : out std_logic;
    GT0_TXUSRCLK2_OUT            : out std_logic;
    GT0_TXOUTCLK_IN              : in  std_logic;
    GT0_RXUSRCLK_OUT             : out std_logic;
    GT0_RXUSRCLK2_OUT            : out std_logic;
    GT0_RXOUTCLK_IN              : in  std_logic;
    DRPCLK_IN                          : in  std_logic;
    DRPCLK_OUT                         : out std_logic
);
end component;

component PRBS_ANY 
     generic (      
          CHK_MODE      : boolean := false; 
          INV_PATTERN   : boolean := false;
          POLY_LENGTH   : natural range 0 to 63      := 31;
          POLY_TAP      : natural range 0 to 63      := 3 ;
          NBITS         : natural range 0 to 512     := 16
     );
     port (
          RST           : in  std_logic;                               -- sync reset active high
          CLK           : in  std_logic;                               -- system clock
          DATA_IN       : in  std_logic_vector(NBITS - 1 downto 0); -- inject error/data to be checked
          EN            : in  std_logic;                               -- enable/pause pattern generation
          DATA_OUT      : out std_logic_vector(NBITS - 1 downto 0)  -- generated prbs pattern/errors found
     );
end component;

COMPONENT <=: $ComponentName :>
 Port (      
          --Reset signal
          reset_i           : in  STD_LOGIC                                                       ;
          --Reference clock for locking the VCXO, can be any clock (local, BUFG, clock enable...)
          ref_clk_i         : in  STD_LOGIC                            ;
          --DRP port to connect to GTX
          drpen_o           : out STD_LOGIC                            ;
          drpwen_o          : out STD_LOGIC                            ;
          drprdy_i          : in  STD_LOGIC                            ;
          drpdo_i           : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          drpdata_o         : out STD_LOGIC_VECTOR (15 downto 0)       ;
          drpaddr_o         : out STD_LOGIC_VECTOR (8 downto 0)        ;
          drpbusy_o         : out STD_LOGIC                            ;
          acc_data          : out STD_LOGIC_VECTOR (4 downto 0)        ;
          --Clocks
          txoutclk_i        : in  std_logic                            ; 
          --phase detector clock enable, for future use
          rsigce_i          : in  STD_LOGIC                            ;
          vsigce_i          : in  STD_LOGIC                            ;
          vsigce_o          : out STD_LOGIC                            ;
          --Coefficients and divider values
          G1                : in  STD_LOGIC_VECTOR (4 downto 0)        ;
          G2                : in  STD_LOGIC_VECTOR (4 downto 0)        ;
          R                 : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          V                 : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          ce_dsp_rate       : in  std_logic_vector (15 downto 0)       ;
          acc_step          : in  std_logic_vector (3 downto 0)        ;
          --Offset, hold
          Offset_ppm        : in  std_logic_vector (21 downto 0);
          Offset_en         : in  std_logic                            ;
          hold              : in  std_logic                            ;
          --Coefficients reserved
          c_i               : in  STD_LOGIC_VECTOR (6 downto 0)        ;
          p_i               : in  STD_LOGIC_VECTOR (9 downto 0)        ;
          n_i               : in  STD_LOGIC_VECTOR (9 downto 0)        ;
          DON_I             : in  std_logic_vector (0  downto 0)       ;
          --DRP user port
          drp_user_req_i    : in  STD_LOGIC                            ;
          drp_user_done_i   : in  STD_LOGIC                            ; 
          drpen_user_i      : in  STD_LOGIC                            ;
          drpwen_user_i     : in  STD_LOGIC                            ;
          drpaddr_user_i    : in  STD_LOGIC_VECTOR (8 downto 0)        ;
          drpdata_user_i    : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          drpdata_user_o    : out STD_LOGIC_VECTOR (15 downto 0)       ;
          drprdy_user_o     : out STD_LOGIC                            ;
          --Debug port
          error_o           : out std_logic_vector (20 downto 0)       ;
          volt_o            : out std_logic_vector (21 downto 0)       ;
          drpdata_short_o   : out std_logic_vector (7 downto 0)        ;
          ce_pi_o           : out std_logic                            ;
          ce_pi2_o          : out std_logic                            ;
          ce_dsp_o          : out std_logic                            ;                
          ovf_pd            : out std_logic                            ;                                          
          ovf_ab            : out std_logic                            ;
          ovf_volt          : out std_logic                            ;
          ovf_int           : out std_logic                                           
          );
END COMPONENT;

<: if { $gt_type == "NO_GT"} { :>
COMPONENT <=: $ComponentName :>_with_gt
 Port (      
          --Reset signal
          reset_i           : in  STD_LOGIC                                                       ;
          --Reference clock for locking the VCXO, can be any clock (local, BUFG, clock enable...)
          ref_clk_i         : in  STD_LOGIC                            ;
          --DRP port to connect to GTX
          drpen_o           : out STD_LOGIC                            ;
          drpwen_o          : out STD_LOGIC                            ;
          drprdy_i          : in  STD_LOGIC                            ;
          drpdo_i           : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          drpdata_o         : out STD_LOGIC_VECTOR (15 downto 0)       ;
          drpaddr_o         : out STD_LOGIC_VECTOR (8 downto 0)        ;
          drpbusy_o         : out STD_LOGIC                            ;
          acc_data          : out STD_LOGIC_VECTOR (4 downto 0)        ;
          --Clocks
          txoutclk_i        : in  std_logic                            ; 
          --phase detector clock enable, for future use
          rsigce_i          : in  STD_LOGIC                            ;
          vsigce_i          : in  STD_LOGIC                            ;
          vsigce_o          : out STD_LOGIC                            ;
          --Coefficients and divider values
          G1                : in  STD_LOGIC_VECTOR (4 downto 0)        ;
          G2                : in  STD_LOGIC_VECTOR (4 downto 0)        ;
          R                 : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          V                 : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          ce_dsp_rate       : in  std_logic_vector (15 downto 0)       ;
          acc_step          : in  std_logic_vector (3 downto 0)        ;
          --Offset, hold
          Offset_ppm        : in  std_logic_vector (21 downto 0);
          Offset_en         : in  std_logic                            ;
          hold              : in  std_logic                            ;
          --Coefficients reserved
          c_i               : in  STD_LOGIC_VECTOR (6 downto 0)        ;
          p_i               : in  STD_LOGIC_VECTOR (9 downto 0)        ;
          n_i               : in  STD_LOGIC_VECTOR (9 downto 0)        ;
          DON_I             : in  std_logic_vector (0  downto 0)       ;
          --DRP user port
          drp_user_req_i    : in  STD_LOGIC                            ;
          drp_user_done_i   : in  STD_LOGIC                            ; 
          drpen_user_i      : in  STD_LOGIC                            ;
          drpwen_user_i     : in  STD_LOGIC                            ;
          drpaddr_user_i    : in  STD_LOGIC_VECTOR (8 downto 0)        ;
          drpdata_user_i    : in  STD_LOGIC_VECTOR (15 downto 0)       ;
          drpdata_user_o    : out STD_LOGIC_VECTOR (15 downto 0)       ;
          drprdy_user_o     : out STD_LOGIC                            ;
          --Debug port
          error_o           : out std_logic_vector (20 downto 0)       ;
          volt_o            : out std_logic_vector (21 downto 0)       ;
          drpdata_short_o   : out std_logic_vector (7 downto 0)        ;
          ce_pi_o           : out std_logic                            ;
          ce_pi2_o          : out std_logic                            ;
          ce_dsp_o          : out std_logic                            ;                
          ovf_pd            : out std_logic                            ;                                          
          ovf_ab            : out std_logic                            ;
          ovf_volt          : out std_logic                            ;
          ovf_int           : out std_logic                                           
          );
END COMPONENT;

<: } :>
-- Debug modules


COMPONENT picxo_ila
  PORT (
    clk    : IN STD_LOGIC;
    probe0 : IN STD_LOGIC_VECTOR(20 DOWNTO 0);
    probe1 : IN STD_LOGIC_VECTOR(21 DOWNTO 0);
    probe2 : IN STD_LOGIC_VECTOR(7  DOWNTO 0);
    probe3 : IN STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe4 : IN STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe5 : IN STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe6 : IN STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe7 : IN STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe8 : IN STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe9 : IN STD_LOGIC_VECTOR(0  DOWNTO 0)
  );
END COMPONENT;

COMPONENT picxo_vio
  PORT (
    clk : IN STD_LOGIC;
    probe_out0  : OUT STD_LOGIC_VECTOR(4  DOWNTO 0);
    probe_out1  : OUT STD_LOGIC_VECTOR(4  DOWNTO 0);
    probe_out2  : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
    probe_out3  : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
    probe_out4  : OUT STD_LOGIC_VECTOR(3  DOWNTO 0);
    probe_out5  : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
    probe_out6  : OUT STD_LOGIC_VECTOR(21 DOWNTO 0);
    probe_out7  : OUT STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe_out8  : OUT STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe_out9  : OUT STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe_out10 : OUT STD_LOGIC_VECTOR(0  DOWNTO 0);
    probe_out11 : OUT STD_LOGIC_VECTOR(0  DOWNTO 0)
  );
END COMPONENT;


--***********************************Parameter Declarations********************
    constant DLY : time := 1 ns;
--************************** Register Declarations ****************************
    signal   gt0_txuserrdy_r                : std_logic;
    signal   gt0_txresetdone_r              : std_logic;
    signal   gt0_txresetdone_r2             : std_logic;
    signal   gt0_rxuserrdy_r                : std_logic;
    signal   gt0_rxresetdone_r              : std_logic;
    signal   gt0_rxresetdone_r2             : std_logic;
    signal   gt0_rxresetdone_r3             : std_logic;
    signal   reset_pulse                    : std_logic_vector(3 downto 0);
    signal   reset_counter                  :   unsigned(5 downto 0) := "000000";
      
--**************************** Wire Declarations ******************************
    -------------------------- GT Wrapper Wires ------------------------------
    ---------------- Channel - Dynamic Reconfiguration Port (DRP) --------------
    signal  gt0_drpaddr_i                   : std_logic_vector(8 downto 0);
    signal  gt0_drpaddr                     : std_logic_vector(8 downto 0);
    signal  gt0_drpdi_i                     : std_logic_vector(15 downto 0);
    signal  gt0_drpdo_i                     : std_logic_vector(15 downto 0);
    signal  gt0_drpen_i                     : std_logic;
    signal  gt0_drprdy_i                    : std_logic;
    signal  gt0_drpwe_i                     : std_logic;
    -------------------------------- Channel PLL -------------------------------
    signal  gt0_cpllfbclklost_i             : std_logic;
    signal  gt0_cplllock_i                  : std_logic;
    signal  gt0_cpllrefclklost_i            : std_logic;
    signal  gt0_cpllreset_i                 : std_logic;
    ------------------------------- Eye Scan Ports -----------------------------
    signal  gt0_eyescandataerror_i          : std_logic;
    ------------------------------- Receive Ports ------------------------------
    signal  gt0_rxuserrdy_i                 : std_logic;
    ------------------- Receive Ports - RX Data Path interface -----------------
    signal  gt0_gtrxreset_i                 : std_logic;
    signal  gt0_rxdata_i                    : std_logic_vector(19 downto 0);
    signal  gt0_rxoutclk_i                  : std_logic;
    ------- Receive Ports - RX Driver,OOB signalling,Coupling and Eq.,CDR ------
    signal  gt0_gtxrxn_i                    : std_logic;
    signal  gt0_gtxrxp_i                    : std_logic;
    signal  gt0_rxcdrlock_i                 : std_logic;
    signal  gt0_rxelecidle_i                : std_logic;
    ------------------------ Receive Ports - RX PLL Ports ----------------------
    signal  gt0_rxresetdone_i               : std_logic;
    ------------------------------- Transmit Ports -----------------------------
    signal  gt0_txuserrdy_i                 : std_logic;
    ------------------ Transmit Ports - TX Data Path interface -----------------
    signal  gt0_gttxreset_i                 : std_logic;
    signal  gt0_txdata_i                    : std_logic_vector(19 downto 0);
    signal  gt0_txoutclk_i                  : std_logic;
    signal  gt0_txoutclk_i_nophase          : std_logic;
    signal  gt0_txoutclkfabric_i            : std_logic;
    signal  gt0_txoutclkpcs_i               : std_logic;
    ---------------- Transmit Ports - TX Driver and OOB signaling --------------
    signal  gt0_gtxtxn_i                    : std_logic;
    signal  gt0_gtxtxp_i                    : std_logic;
    ----------------------- Transmit Ports - TX PLL Ports ----------------------
    signal  gt0_txresetdone_i               : std_logic;
    ------------------------------- Global Signals -----------------------------
    signal  tied_to_ground_i                : std_logic;
    signal  tied_to_ground_vec_i            : std_logic_vector(63 downto 0);
    signal  tied_to_vcc_i                   : std_logic;
    signal  tied_to_vcc_vec_i               : std_logic_vector(7 downto 0);
   ------------------------------- User Clocks ---------------------------------
    signal  gt0_txusrclk_i                  : std_logic; 
    signal  gt0_txusrclk_i_nophase          : std_logic; 
    signal  gt0_txusrclk2_i                 : std_logic; 
    signal  gt0_txclk_lock_out_i            : std_logic;
    signal  gt0_rxusrclk_i                  : std_logic; 
    signal  gt0_rxusrclk2_i                 : std_logic; 
    signal  gt0_rxclk_lock_out_i            : std_logic; 
    ----------------------------- Reference Clocks ----------------------------
    signal  q2_clk1_refclk_i                : std_logic;
    ----------------------- Frame check/gen Module Signals --------------------
    signal  gt0_matchn_i                    : std_logic;   
    signal  gt0_txcharisk_float_i           : std_logic_vector(5 downto 0);
    signal  gt0_txdata_float16_i            : std_logic_vector(15 downto 0);
    signal  gt0_txdata_float_i              : std_logic_vector(43 downto 0);
    signal  gt0_block_sync_i                : std_logic;
    signal  gt0_frame_check_reset_i         : std_logic;
    signal  gt0_inc_in_i                    : std_logic;
    signal  gt0_inc_out_i                   : std_logic;
    signal  gt0_unscrambled_data_i          : std_logic_vector(19 downto 0);
    signal  reset_on_data_error_i           : std_logic;
    signal  track_data_out_i                : std_logic;
    ----------------------- Chipscope Signals ---------------------------------
      
    signal  gttxreset_i                     : std_logic;
    signal  gtrxreset_i                     : std_logic;

    signal  user_tx_reset_i                 : std_logic;
    signal  user_rx_reset_i                 : std_logic;
    signal  tx_vio_clk_i                    : std_logic;
    signal  tx_vio_clk_mux_out_i            : std_logic;    
    signal  rx_vio_ila_clk_i                : std_logic;
    signal  rx_vio_ila_clk_mux_out_i        : std_logic;    

    signal  cpllreset_i                     : std_logic :='0';
      
    signal  error_det_or                    : std_logic;
    attribute shreg_extract                 : string;
    signal    picxo_rst                     : std_logic_vector(7 downto 0) := (others =>'0');
    attribute shreg_extract of picxo_rst    : signal is "no";
 
 <: if { $gt_type == "NO_GT"} { :>   
    signal    picxo_rst_nogt                : std_logic_vector(7 downto 0) := (others =>'0');
    attribute shreg_extract of picxo_rst_nogt : signal is "no";
    signal  G1_nogt                              : STD_LOGIC_VECTOR (4 downto 0) ;
    signal  G2_nogt                              : STD_LOGIC_VECTOR (4 downto 0) ;
    signal  R_nogt                               : STD_LOGIC_VECTOR (15 downto 0);
    signal  V_nogt                               : STD_LOGIC_VECTOR (15 downto 0);
    signal  ce_dsp_rate_nogt                     : std_logic_vector (15 downto 0);
<: } :>    
    signal  G1                              : STD_LOGIC_VECTOR (4 downto 0) ;
    signal  G2                              : STD_LOGIC_VECTOR (4 downto 0) ;
    signal  R                               : STD_LOGIC_VECTOR (15 downto 0);
    signal  V                               : STD_LOGIC_VECTOR (15 downto 0);
    signal  ce_dsp_rate                     : std_logic_vector (15 downto 0);
    signal  C                               : STD_LOGIC_VECTOR (6 downto 0) ;
    signal  P                               : STD_LOGIC_VECTOR (9 downto 0) ;
    signal  N                               : STD_LOGIC_VECTOR (9 downto 0) ;
    signal  don                             : STD_LOGIC_VECTOR (0 downto 0) ;
    
    signal  Offset_ppm                      : std_logic_vector (21 downto 0);
    signal  Offset_en                       : std_logic                     ;
    signal  hold                            : std_logic                     ;
    signal  rsigce                          : std_logic                     ;
    signal  vsigce                          : std_logic                     ;

    signal  prev_drp_rst                    : std_logic;
    signal  error_det                       : std_logic_vector(19 downto 0);
    signal  prbs_error_det_or               : std_logic;

    signal  reset_req                       : std_logic := '0';
    signal  drp_user_req                    : std_logic :='0';
    signal  drpen_user                      : STD_LOGIC;
    signal  drpwen_user                     : STD_LOGIC;
    signal  drpaddr_user                    : STD_LOGIC_VECTOR (8 downto 0);
    signal  drpdata_user                    : STD_LOGIC_VECTOR (15 downto 0);
    signal  drprdy_user                     : STD_LOGIC;                                                       
    signal  drpbusy                         : STD_LOGIC;
    signal  gtx_drpdata_o                   : STD_LOGIC_VECTOR (15 downto 0);
    signal  acc_step                        : STD_LOGIC_VECTOR (3 downto 0);
    signal  gtx_test_bit1_i                 : STD_LOGIC;

    signal error_o                          : STD_LOGIC_VECTOR (20 downto 0) ;
    signal volt_o                           : STD_LOGIC_VECTOR (21 downto 0) ;
    signal drpdata_short_o                  : STD_LOGIC_VECTOR (7  downto 0) ;
    signal ce_pi_o                          : STD_LOGIC ;
    signal ce_pi2_o                         : STD_LOGIC ;
    signal ce_dsp_o                         : STD_LOGIC ;
    signal ovf_pd                           : STD_LOGIC ;
    signal ovf_ab                           : STD_LOGIC ;
    signal ovf_volt                         : STD_LOGIC ;
    signal ovf_int                          : STD_LOGIC ;

 <: if { $gt_type == "NO_GT"} { :>     
    signal  acc_step_nogt                   : STD_LOGIC_VECTOR (3 downto 0)  ;
    signal acc_data_nogt                    : STD_LOGIC_VECTOR (4 downto 0)  ;
    signal error_o_nogt                     : STD_LOGIC_VECTOR (20 downto 0) ;
    signal volt_o_nogt                      : STD_LOGIC_VECTOR (21 downto 0) ;
    signal drpdata_short_o_nogt             : STD_LOGIC_VECTOR (7  downto 0) ;
    signal ce_pi_o_nogt                     : STD_LOGIC ;
    signal ce_pi2_o_nogt                    : STD_LOGIC ;
    signal ce_dsp_o_nogt                    : STD_LOGIC ;
    signal ovf_pd_nogt                      : STD_LOGIC ;
    signal ovf_ab_nogt                      : STD_LOGIC ;
    signal ovf_volt_nogt                    : STD_LOGIC ;
    signal ovf_int_nogt                     : STD_LOGIC ;
<: } :> 
   
    constant POLY_LENGTH : natural  :=  7 ;
    constant POLY_TAP    : natural  :=  6 ;
    constant INV_PATTERN : boolean  := false;

    signal gtx0_txoutclkpcs                 : std_logic;

    signal gtx0_txusrclk2                   : std_logic;
    signal gtx0_rxdata_i                    : std_logic_vector(19 downto 0);
    signal prbs_error_det_or_o              : std_logic;
    signal gtx0_txoutclk_i                  : std_logic;
    signal gtx0_rxrecclk_out_bufg           : std_logic;

    signal gtx0_den_i                       : std_logic;
    signal gtx0_dwe_i                       : std_logic;
    signal gtx0_drdy_i                      : std_logic;
    signal gtx0_di_i                        : std_logic_vector (15 downto 0);
    signal gtx0_daddr_i                     : std_logic_vector (7 downto 0);

    signal sys_clk                          : std_logic;
    signal debounce                         : std_logic_vector (31 downto 0);
    signal rst_sync                         : std_logic_vector (3 downto 0);
    signal rst_sys_clk                      : std_logic := '0'; 

    signal gt0_rxoutclkpcs_i                : std_logic;

    function and_reduce(arg: std_logic_vector) return std_logic is
        variable result: std_logic;
       begin
        result := '1';
        for i in arg'range loop
           result := result and arg(i);
        end loop;
        return result;
       end;
       
       
    -- WA CR#856942 mark_debug not getting applied automatically on the signals connected to ILA 
    --attribute mark_debug : string;
    --attribute mark_debug of error_o,volt_o,drpdata_short_o,ce_pi_o,ce_pi2_o,ce_dsp_o,ovf_pd,ovf_ab,ovf_volt,ovf_int : signal is "true";
--**************************** Main Body of Code *******************************
begin
    --  Static signal Assigments
    tied_to_ground_i                             <= '0';
    
    gt0_usrclk_source : gtwizard_v2_4_GT_USRCLK_SOURCE
    port map
    (
        Q0_CLK1_GTREFCLK_PAD_N_IN       =>      Q2_CLK1_GTREFCLK_PAD_N_IN,
        Q0_CLK1_GTREFCLK_PAD_P_IN       =>      Q2_CLK1_GTREFCLK_PAD_P_IN,
        Q0_CLK1_GTREFCLK_OUT            =>      q2_clk1_refclk_i,
        GT0_TXUSRCLK_OUT                =>      gt0_txusrclk_i,
        GT0_TXUSRCLK2_OUT               =>      gt0_txusrclk2_i,
        GT0_TXOUTCLK_IN                 =>      gt0_txoutclk_i,
        GT0_RXUSRCLK_OUT                =>      open,--GTX0_RXUSERCLK_OUT,
        GT0_RXUSRCLK2_OUT               =>      gt0_rxusrclk2_i,
        GT0_RXOUTCLK_IN                 =>      gt0_rxoutclk_i,
        DRPCLK_IN                       =>      '0',
        DRPCLK_OUT                      =>      open
    );

    ----------------------------- The GT Wrapper -----------------------------
    
    -- Use the instantiation template in the example directory to add the GT wrapper to your design.
    -- In this example, the wrapper is wired up for basic operation with a frame generator and frame 
    -- checker. The GTs will reset, then attempt to align and transmit data. If channel bonding is 
    -- enabled, bonding should occur after alignment.

    gtwizard_v2_4_i : gtwizard_v2_4_picxo_example
    generic map
    (
        WRAPPER_SIM_GTRESET_SPEEDUP     =>      EXAMPLE_SIM_GTRESET_SPEEDUP
    )
    port map
    (
        ---------------- Channel - Dynamic Reconfiguration Port (DRP) --------------
        GT0_DRPADDR_IN                  =>      gt0_drpaddr_i,
        GT0_DRPCLK_IN                   =>      gt0_txusrclk_i,
        GT0_DRPDI_IN                    =>      gt0_drpdi_i,
        GT0_DRPDO_OUT                   =>      gt0_drpdo_i,
        GT0_DRPEN_IN                    =>      gt0_drpen_i,
        GT0_DRPRDY_OUT                  =>      gt0_drprdy_i,
        GT0_DRPWE_IN                    =>      gt0_drpwe_i,
        ------------------------------- Loopback Ports -----------------------------
        GT0_LOOPBACK_IN                 =>      "000",
        ----------------------------- PCI Express Ports ----------------------------
        GT0_RXRATE_IN                   =>      "000",
        ------------------------- Channel - Ref Clock Ports ------------------------
        GT0_GTREFCLK0_IN                =>      q2_clk1_refclk_i,
        -------------------------------- Channel PLL -------------------------------
        GT0_CPLLFBCLKLOST_OUT           =>      gt0_cpllfbclklost_i,
        GT0_CPLLLOCK_OUT                =>      gt0_cplllock_i,
        GT0_CPLLLOCKDETCLK_IN           =>      sys_clk,
        GT0_CPLLREFCLKLOST_OUT          =>      gt0_cpllrefclklost_i,
        GT0_CPLLRESET_IN                =>      gt0_cpllreset_i,
        ------------------------------- Eye Scan Ports -----------------------------
        GT0_EYESCANDATAERROR_OUT        =>      gt0_eyescandataerror_i,
        ------------------------------- Receive Ports ------------------------------
        GT0_RXUSERRDY_IN                =>      gt0_rxuserrdy_i,
        ------------------- Receive Ports - RX Data Path interface -----------------
        GT0_RXDATA_OUT                  =>      gt0_rxdata_i,
        GT0_RXOUTCLK_OUT                =>      gt0_rxoutclk_i,
        GT0_RXOUTCLKPCS_OUT             =>      gt0_rxoutclkpcs_i,
        GT0_RXUSRCLK_IN                 =>      gt0_txusrclk_i, 
        GT0_RXUSRCLK2_IN                =>      gt0_txusrclk_i, 
        ------------- Receive Ports - RX Initialization and Reset Ports ------------
        GT0_GTRXRESET_IN                =>      gt0_gtrxreset_i,
        GT0_RXPCSRESET_IN               =>      '0',
        GT0_RXPMARESET_IN               =>      '0',
        ------- Receive Ports - RX Driver,OOB signalling,Coupling and Eq.,CDR ------
        GT0_GTXRXN_IN                   =>      RXN_IN,
        GT0_GTXRXP_IN                   =>      RXP_IN,
        GT0_RXCDRLOCK_OUT               =>      gt0_rxcdrlock_i,
        --------------------- Receive Ports - RX Equalizer Ports -------------------
        GT0_RXDFELPMRESET_IN            =>      '0',
        --------------------- Receive Ports - RX Equilizer Ports -------------------
        GT0_RXLPMHFHOLD_IN              =>      '0',
        GT0_RXLPMLFHOLD_IN              =>      '0',
        ------------------- Receive Ports - RX Buffer Bypass Ports -----------------
        GT0_RXBUFRESET_IN               =>      '0',
        ------------------------ Receive Ports - RX PLL Ports ----------------------
        GT0_RXRESETDONE_OUT             =>      gt0_rxresetdone_i,
        ------------------------------- Transmit Ports -----------------------------
        GT0_TXUSERRDY_IN                =>      gt0_txuserrdy_i,
        ------------------------ TX Configurable Driver Ports ----------------------
        GT0_TXPOSTCURSOR_IN             =>      "00000",
        GT0_TXPRECURSOR_IN              =>      "00000",
        --------------- Transmit Ports - TX Configurable Driver Ports --------------
        GT0_TXDIFFCTRL_IN               =>      "1000",
        ------------------ Transmit Ports - TX Data Path interface -----------------
        GT0_GTTXRESET_IN                =>      gt0_gttxreset_i,
        GT0_TXDATA_IN                   =>      gt0_rxdata_i,
        GT0_TXOUTCLK_OUT                =>      gt0_txoutclk_i_nophase,
        GT0_TXOUTCLKFABRIC_OUT          =>      gt0_txoutclkfabric_i,
        GT0_TXOUTCLKPCS_OUT             =>      gt0_txoutclkpcs_i,
        GT0_TXUSRCLK_IN                 =>      gt0_txusrclk_i,
        GT0_TXUSRCLK2_IN                =>      gt0_txusrclk_i,
        ---------------- Transmit Ports - TX Driver and OOB signaling --------------
        GT0_GTXTXN_OUT                  =>      TXN_OUT,
        GT0_GTXTXP_OUT                  =>      TXP_OUT,
        ----------------------- Transmit Ports - TX PLL Ports ----------------------
        GT0_TXRESETDONE_OUT             =>      gt0_txresetdone_i,
        ------------- Transmit Ports - TX Initialization and Reset Ports -----------
        GT0_TXPCSRESET_IN               =>      '0',
    --____________________________COMMON PORTS________________________________
        ------------- Common Block  - Dynamic Reconfiguration Port (DRP) -----------
        GT0_DRPADDR_COMMON_IN           =>      (others=>'0'),
        GT0_DRPCLK_COMMON_IN            =>      '0',
        GT0_DRPDI_COMMON_IN             =>      (others=>'0'),
        GT0_DRPDO_COMMON_OUT            =>      open,
        GT0_DRPEN_COMMON_IN             =>      '0',
        GT0_DRPRDY_COMMON_OUT           =>      open,
        GT0_DRPWE_COMMON_IN             =>      '0',
        ---------------------- Common Block  - Ref Clock Ports ---------------------
        GT0_GTREFCLK0_COMMON_IN         =>      '0',
        ------------------------- Common Block - QPLL Ports ------------------------
        GT0_QPLLLOCK_OUT                =>      open,
        GT0_QPLLLOCKDETCLK_IN           =>      '0',
        GT0_QPLLREFCLKLOST_OUT          =>      open,
        GT0_QPLLRESET_IN                =>      '0'
    );
  
-------------- Prbs check module ------------------------------------------------------
   I_PRBS_CHK_RX: PRBS_ANY 
   GENERIC MAP(
      CHK_MODE    => TRUE,
      INV_PATTERN => INV_PATTERN,
      POLY_LENGTH => POLY_LENGTH,              
      POLY_TAP    => POLY_TAP,
      NBITS       => 20
   )
   PORT MAP(
           RST      => reset_req,
           CLK      => gt0_txusrclk_i,
           DATA_IN  => gt0_rxdata_i,
           EN       => '1',
           DATA_OUT => error_det
           );     

     prbs_error_det_or  <= error_det(0) OR error_det(1) OR error_det(2) OR error_det(3) OR error_det(4) OR error_det(5) OR error_det(6) OR error_det(7) OR error_det(8) OR error_det(9)
                           OR error_det(10) OR error_det(11) OR error_det(12) OR error_det(13) OR error_det(14) OR error_det(15) OR error_det(16) OR error_det(17) OR error_det(18) OR error_det(19);     
     PRBS_ERR           <= prbs_error_det_or;

     CPLL_LOCK <= gt0_cplllock_i;     
--------------------------------------------------------------------------------------
------------------ PICXO -------------------------------------------------------------
--------------------------------------------------------------------------------------
 gt0_drpaddr_i <= gt0_drpaddr;
 <: if { $gt_type == "NO_GT"} { :> 
 <=: $ComponentName :>_i : <=: $ComponentName :>
     PORT MAP (
          REF_CLK_I        => gt0_rxoutclkpcs_i         ,
          RESET_I          => picxo_rst_nogt(7)         , 
          DRPEN_O          => open                      ,
          DRPWEN_O         => open                      ,
          DRPRDY_I         => '1'                       ,
          DRPDATA_O        => open                      ,
          DRPDO_I          => (others=>'0')             ,
          DRPADDR_O        => open                      ,
          DRPBUSY_O        => open                      ,
          ACC_DATA         => acc_data_nogt             ,
          TXOUTCLK_I       => sys_clk                   ,
          RSIGCE_I         => rsigce                    ,
          VSIGCE_I         => acc_data_nogt(0)          ,
          VSIGCE_O         => open                      ,
          ACC_STEP         => "0001"                    ,
          G1               => G1_nogt                   ,
          G2               => G2_nogt                   ,
          R                => R_nogt                    ,
          V                => V_nogt                    ,
          C_I              => C                         ,
          P_I              => P                         ,
          N_I              => N                         ,
          OFFSET_PPM       => Offset_ppm                ,
          OFFSET_EN        => Offset_en                 ,
          HOLD             => hold                      ,
          DON_I            => don                       ,
          CE_DSP_RATE      => ce_dsp_rate_nogt          ,
          DRP_USER_REQ_I   => '0'                       ,
          DRP_USER_DONE_I  => '0'                       ,
          DRPEN_USER_I     => drpen_user                ,
          DRPWEN_USER_I    => drpwen_user               ,
          DRPDATA_USER_I   => drpdata_user              ,
          DRPDATA_USER_O   => open                      ,
          DRPADDR_USER_I   => drpaddr_user              ,
          DRPRDY_USER_O    => open                      ,
          --DEBUG PORT
          ERROR_O          => error_o_nogt              ,
          VOLT_O           => volt_o_nogt               ,
          DRPDATA_SHORT_O  => drpdata_short_o_nogt      ,
          CE_PI_O          => ce_pi_o_nogt              ,
          CE_PI2_O         => ce_pi2_o_nogt             ,
          CE_DSP_O         => ce_dsp_o_nogt             , 
          OVF_PD           => ovf_pd_nogt               ,  
          OVF_AB           => ovf_ab_nogt               ,
          OVF_VOLT         => ovf_volt_nogt             ,
          OVF_INT          => ovf_int_nogt             
        );      

 <=: $ComponentName :>_with_gt_i : <=: $ComponentName :>_with_gt
     PORT MAP (
          REF_CLK_I        => acc_data_nogt(0)          ,
          RESET_I          => picxo_rst(7)              , 
          DRPEN_O          => gt0_drpen_i               ,
          DRPWEN_O         => gt0_drpwe_i               ,
          DRPRDY_I         => gt0_drprdy_i              ,
          DRPDATA_O        => gt0_drpdi_i               ,
          DRPDO_I          => gt0_drpdo_i               ,
          DRPADDR_O        => gt0_drpaddr               ,
          DRPBUSY_O        => drpbusy                   ,
          ACC_DATA         => open,
          TXOUTCLK_I       => gt0_txusrclk_i            ,
          RSIGCE_I         => rsigce                    ,
          VSIGCE_I         => vsigce                    ,
          VSIGCE_O         => open                      ,
          ACC_STEP         => acc_step                  ,
          G1               => G1                        ,
          G2               => G2                        ,
          R                => R                         ,
          V                => V                         ,
          C_I              => C                         ,
          P_I              => P                         ,
          N_I              => N                         ,
          OFFSET_PPM       => Offset_ppm                ,
          OFFSET_EN        => Offset_en                 ,
          HOLD             => hold                      ,
          DON_I            => don                       ,
          CE_DSP_RATE      => ce_dsp_rate               ,
          DRP_USER_REQ_I   => drp_user_req              ,
          DRP_USER_DONE_I  => picxo_rst(7)              ,
          DRPEN_USER_I     => drpen_user                ,
          DRPWEN_USER_I    => drpwen_user               ,
          DRPDATA_USER_I   => drpdata_user              ,
          DRPDATA_USER_O   => open                      ,
          DRPADDR_USER_I   => drpaddr_user              ,
          DRPRDY_USER_O    => drprdy_user               ,
          --DEBUG PORT
          ERROR_O          => error_o                   ,
          VOLT_O           => volt_o                    ,
          DRPDATA_SHORT_O  => drpdata_short_o           ,
          CE_PI_O          => ce_pi_o                   ,
          CE_PI2_O         => ce_pi2_o                  ,
          CE_DSP_O         => ce_dsp_o                  , 
          OVF_PD           => ovf_pd                    ,  
          OVF_AB           => ovf_ab                    ,
          OVF_VOLT         => ovf_volt                  ,
          OVF_INT          => ovf_int             
        );      
  <: } :>

 <: if { $gt_type != "NO_GT" } { :> 
   <=: $ComponentName :>_i : <=: $ComponentName :>  
     PORT MAP (
          REF_CLK_I        => gt0_rxoutclkpcs_i         ,
          RESET_I          => picxo_rst(7)              , 
          DRPEN_O          => gt0_drpen_i               ,
          DRPWEN_O         => gt0_drpwe_i               ,
          DRPRDY_I         => gt0_drprdy_i              ,
          DRPDATA_O        => gt0_drpdi_i               ,
          DRPDO_I          => gt0_drpdo_i               ,
          DRPADDR_O        => gt0_drpaddr               ,
          DRPBUSY_O        => drpbusy                   ,
          ACC_DATA         => open                      ,
          TXOUTCLK_I       => gt0_txusrclk_i            ,
          RSIGCE_I         => rsigce                    ,
          VSIGCE_I         => vsigce                    ,
          VSIGCE_O         => open                      ,
          ACC_STEP         => acc_step                  ,
          G1               => G1                        ,
          G2               => G2                        ,
          R                => R                         ,
          V                => V                         ,
          C_I              => C                         ,
          P_I              => P                         ,
          N_I              => N                         ,
          OFFSET_PPM       => Offset_ppm                ,
          OFFSET_EN        => Offset_en                 ,
          HOLD             => hold                      ,
          DON_I            => don                       ,
          CE_DSP_RATE      => ce_dsp_rate               ,
          DRP_USER_REQ_I   => drp_user_req              ,
          DRP_USER_DONE_I  => picxo_rst(7)              ,
          DRPEN_USER_I     => drpen_user                ,
          DRPWEN_USER_I    => drpwen_user               ,
          DRPDATA_USER_I   => drpdata_user              ,
          DRPDATA_USER_O   => open                      ,
          DRPADDR_USER_I   => drpaddr_user              ,
          DRPRDY_USER_O    => drprdy_user               ,
          --DEBUG PORT
          ERROR_O          => error_o                   ,
          VOLT_O           => volt_o                    ,
          DRPDATA_SHORT_O  => drpdata_short_o           ,
          CE_PI_O          => ce_pi_o                   ,
          CE_PI2_O         => ce_pi2_o                  ,
          CE_DSP_O         => ce_dsp_o                  , 
          OVF_PD           => ovf_pd                    ,  
          OVF_AB           => ovf_ab                    ,
          OVF_VOLT         => ovf_volt                  ,
          OVF_INT          => ovf_int             
        );      
<: } :>
 
 
   
   GTX0_RXUSERCLK_OUT <= gt0_rxoutclkpcs_i ;
   GTX0_TXUSERCLK_OUT <= gt0_txusrclk_i    ;
   
   sys_clk_bufg_inst : IBUFGDS generic map (IOSTANDARD => "DEFAULT") port map(I=>SYS_CLK_P, IB =>SYS_CLK_N, O=>sys_clk);

   Deb_srl: process (sys_clk) begin
               if rising_edge(sys_clk) then
                    debounce(31 downto 0)<=debounce(30 downto 0) & SYS_RST;
               end if;
            end process;
                                     
   Deb_rst: process (sys_clk) begin
                         if rising_edge(sys_clk) then
                              if debounce(1) ='1' and debounce(31) ='0' then
                                   rst_sys_clk <= '1';
                              elsif debounce(1) = '0' and debounce(31) ='1' then
                                   rst_sys_clk <= '0';
                              end if;
                         end if;
                    end process;
     
     rst_sync_inst: process (sys_clk) begin
                              if rising_edge (sys_clk) then
                                   rst_sync(3 downto 0)<= rst_sync(2 downto 0) & (rst_sys_clk  );
                                   reset_req <= (rst_sync (3) and not rst_sync(2));
                              end if;
                     end process;

    process (gt0_txusrclk_i, gt0_gtrxreset_i)
    begin
       if(gt0_gtrxreset_i = '1') then
            gt0_rxuserrdy_r     <= '0' after DLY;
       elsif(gt0_txusrclk_i'event and gt0_txusrclk_i = '1') then
            gt0_rxuserrdy_r     <=  gt0_cplllock_i after DLY;
       end if;
    end process;
      
    process (gt0_txusrclk_i, gt0_gttxreset_i)
    begin
       if(gt0_gttxreset_i = '1') then
            gt0_txuserrdy_r     <= '0' after DLY;
       elsif(gt0_txusrclk_i'event and gt0_txusrclk_i = '1') then
            gt0_txuserrdy_r     <=  gt0_cplllock_i after DLY;
    end if;
    end process;
    
    process (gt0_txusrclk_i, picxo_rst, gt0_gttxreset_i)
    begin
       if(picxo_rst(0) = '1' or gt0_gttxreset_i ='1') then
            picxo_rst (7 downto 1)     <= (others=>'1');
       elsif rising_edge (gt0_txusrclk_i) then
            picxo_rst (7 downto 1)     <=  picxo_rst(6 downto 0);
    end if;
    end process;  
<: if { $gt_type == "NO_GT" } { :> 
   
   process (gt0_txusrclk_i, picxo_rst_nogt, gt0_gttxreset_i)
    begin
       if(picxo_rst_nogt(0) = '1' or gt0_gttxreset_i ='1') then
            picxo_rst_nogt (7 downto 1)     <= (others=>'1');
       elsif rising_edge (gt0_txusrclk_i) then
            picxo_rst_nogt (7 downto 1)     <=  picxo_rst_nogt(6 downto 0);
    end if;
    end process;   
    
<: } :>                 
----------------------------- Chipscope Connections -----------------------
    -- When the example design is run in hardware, it uses chipscope to allow the
    -- example design and GT wrapper to be controlled and monitored. The 
    -- EXAMPLE_USE_SCOPE parameter allows chipscope to be removed for simulation.

debug : if EXAMPLE_USE_SCOPE = 1 generate
    
     C <= (others => '0');
     N <= (others => '0');
     P <= (others => '0');
     
    drpaddr_user      <= (others=>'1')   ;
    drp_user_req      <= '0'             ;
    drpen_user        <= '0'             ;
    drpwen_user       <= '0'             ;
    drpdata_user      <= (others=>'1')   ; 

--  PICXCO ILA
<: if { $gt_type == "NO_GT"} { :> 
  
picxo_ila_no_gt : picxo_ila
  PORT MAP (
    clk         => sys_clk               ,
    probe0      => error_o_nogt          ,
    probe1      => volt_o_nogt           ,
    probe2      => drpdata_short_o_nogt  ,
    probe3(0)   => ce_pi_o_nogt          ,
    probe4(0)   => ce_pi2_o_nogt         ,
    probe5(0)   => ce_dsp_o_nogt         ,  
    probe6(0)   => ovf_pd_nogt           , 
    probe7(0)   => ovf_ab_nogt           ,
    probe8(0)   => ovf_volt_nogt         ,
    probe9(0)   => ovf_int_nogt        
  );

picxo_vio_no_gt : picxo_vio
    PORT MAP (
      clk            => sys_clk              ,
      probe_out0     => G1_nogt (4 downto 0) ,
      probe_out1     => G2_nogt (4 downto 0) ,
      probe_out2     => R_nogt               ,
      probe_out3     => V_nogt               ,
      probe_out4     => acc_step_nogt        ,
      probe_out5     => ce_dsp_rate_nogt     ,
      probe_out6     => open                 ,
      probe_out7(0)  => open                 ,
      probe_out8(0)  => open                 ,
      probe_out9(0)  => picxo_rst_nogt(0)    ,
      probe_out10(0) => open                 ,
      probe_out11    => open
    );  
    
<: } :>   
 
picxo_ila_i : picxo_ila
  PORT MAP (
    clk         => gt0_txusrclk_i   ,
    probe0      => error_o          ,
    probe1      => volt_o           ,
    probe2      => drpdata_short_o  ,
    probe3(0)   => ce_pi_o          ,
    probe4(0)   => ce_pi2_o         ,
    probe5(0)   => ce_dsp_o         ,  
    probe6(0)   => ovf_pd           , 
    probe7(0)   => ovf_ab           ,
    probe8(0)   => ovf_volt         ,
    probe9(0)   => ovf_int        
  );
  

picxo_vio_i : picxo_vio
  PORT MAP (
    clk            => sys_clk         ,
    probe_out0     => G1 (4 downto 0) ,
    probe_out1     => G2 (4 downto 0) ,
    probe_out2     => R               ,
    probe_out3     => V               ,
    probe_out4     => acc_step        ,
    probe_out5     => ce_dsp_rate     ,
    probe_out6     => Offset_ppm      ,
    probe_out7(0)  => Offset_en       ,
    probe_out8(0)  => hold            ,
    probe_out9(0)  => picxo_rst(0)    ,
    probe_out10(0) => cpllreset_i     ,
    probe_out11    => don
  );                                
    
    rsigce           <= '1';
    vsigce           <= '1';
    
    gt0_gtrxreset_i  <= gtrxreset_i or not gt0_cplllock_i ;
    gt0_gttxreset_i  <= gttxreset_i or not gt0_cplllock_i ;
    gt0_cpllreset_i  <= cpllreset_i or reset_req;
    gt0_rxuserrdy_i  <= gt0_rxuserrdy_r;
    gt0_txuserrdy_i  <= gt0_txuserrdy_r;

    
    gt0_txoutclk_i <= gt0_txoutclk_i_nophase;
    
end generate debug;

no_debug : if EXAMPLE_USE_SCOPE = 0 generate
    
    gt0_txoutclk_i <= gt0_txoutclk_i_nophase;
    --***********************************************************************--
    -----------------------  Reset Logic  -------------------------------------                                                                    --
    --***********************************************************************--

    gt0_gtrxreset_i  <= gtrxreset_i or not gt0_cplllock_i ;
    gt0_gttxreset_i  <= gttxreset_i or not gt0_cplllock_i ;
    gt0_cpllreset_i  <= cpllreset_i or reset_req;
    gt0_rxuserrdy_i  <= gt0_rxuserrdy_r;
    gt0_txuserrdy_i  <= gt0_txuserrdy_r;

    don          <= don_i         ;
    C            <= C_i           ;
    N            <= N_i           ;
    P            <= P_i           ;
    R            <= R_i           ;
    V            <= V_i           ;
    G1           <= G1_i          ;
    G2           <= G2_i          ;
    ce_dsp_rate  <= ce_dsp_rate_i ;
    acc_step     <= acc_step_i    ;
    Offset_ppm   <= Offset_ppm_i  ;
    Offset_en    <= Offset_en_i   ;
    hold         <= hold_i        ;
    picxo_rst(0) <= picxo_rst_i   ;
    cpllreset_i  <= '0'           ;

    rsigce           <= rsigce_i;
    vsigce           <= vsigce_i;
    
    drpaddr_user      <= drpaddr_user_i ;
    drp_user_req      <= drp_user_req_i ;
    drpen_user        <= drpen_user_i   ;
    drpwen_user       <= drpwen_user_i  ;
    drpdata_user      <= drpdata_user_i ; 
    

    gttxreset_i       <= tied_to_ground_i;
    gtrxreset_i       <= tied_to_ground_i;
    user_tx_reset_i   <= tied_to_ground_i;
    user_rx_reset_i   <= tied_to_ground_i;


end generate no_debug;
end RTL;
















